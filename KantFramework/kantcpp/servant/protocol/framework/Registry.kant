#include "NodeDescriptor.kant"
#include "RegistryDescriptor.kant"

module kant
{
    struct PatchResult
    {
        0 require string sApplication;
        1 require string sServerName;
        2 require string sNodeName;
        3 require string sVersion;
        4 require string sUserName;
    };

    struct BaseImageInfo
    {
        0 optional string id;
        1 optional string image;
        2 optional string registryId;
        3 optional string sha;
    };

    struct DockerRegistry
    {
        0 optional string sId;
        1 optional string sRegistry;    //仓库地址
        2 optional string sUserName;    //用户名
        3 optional string sPassword;    //密码
        4 optional bool   bSucc = false;//是否成功登录过
        5 optional vector<BaseImageInfo> baseImages;
    };

    struct FrameworkKey
    {
        0 optional string cuid;
        1 optional string priKey;
    };

    /**
     * registry接口
     */
    interface Registry
    {
        /**
         * node启动的时候往registry注册一个session
         *
         * @param nodeName node名称
         * @param ni   node详细信息
         * @param li    node机器负载信息
         *
         * @return 注册是否成功
         */
        int registerNode(string nodeName, NodeInfo ni, LoadInfo li);

        /**
         * node上报心跳及机器负载
         *
         * @param nodeName    node名称
         * @param load    node机器负载信息
         */
        int keepAlive(string nodeName, LoadInfo load);

        /**
         * 获取在该node部署的server列表
         *
         * @param app:       应用
         * @param serverName: server 名
         * @param nodeName : node id
         *
         * @return server信息列表
         */
        vector<ServerDescriptor> getServers(string app, string serverName, string nodeName);

        /**
         * 更新server状态
         *
         * @param app:       应用
         * @param serverName: server 名
         * @param nodeName : node id
         * @param state :  server状态信息
         *
         * @return 0-成功 others-失败
         */
        int updateServer(string app, string serverName, string nodeName, ServerStateInfo state);

        /**
         * 批量更新server状态
         *
         * @param state :  server状态信息
         *
         * @return 0-成功 others-失败
         */
        int updateServerBatch(vector<ServerStateInfo> vState);

        /**
         * node停止，释放node的会话
         *
         * @param nodeName    node名称
         *
         * @return 0-成功 others-失败
         */
        int destroyNode(string nodeName);

        /**
         * 上报server的kant库版本
         * @param app:       应用
         * @param serverName: server 名
         * @param nodeName : node id
         * @param version:  server基于的kant版本号
         *
         * @return 0-成功 others-失败
         */
        int reportVersion(string app, string serverName, string nodeName, string version);

        /**
         * 获取node的模板配置
         * @param nodeName: node名称
         * @param out profileTemplate:  对应模板内容
         *
         * @return 0-成功 others-失败
         */
        int getNodeTemplate(string nodeName, out string profileTemplate);

        /**
         * node通过接口获取连接上主控的node ip
         * @param sNodeIp:  node 的ip
         *
         * @return 0-成功 others-失败
         */
        int getClientIp(out string sClientIp);

        /**
         * 发布服务完毕之后统一UPDATE发布版本和发布人
         *
         */
        int updatePatchResult(PatchResult result);

        /**
         * 获取docker的镜像仓库
         */
        int getDockerRegistry(out vector<DockerRegistry> doctorRegistries);

        /**
         * 拉取基础镜像
         */
        int dockerPull(string baseImageId);

        /**
         * 获取框架在市场上的key
         */
        int getFrameworkKey(out FrameworkKey fKey);
    };

};

