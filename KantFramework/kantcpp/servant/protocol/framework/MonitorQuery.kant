module kant
{
    enum OP
    {
        EQ,
        GT,
        GTE,
        LT,
        LTE,
        LIKE
    };

    struct Condition
    {
        0 require string field;
        1 require OP op;
        2 require string val;
    };

    struct MonitorQueryReq
    {
        0 require string uid;
        1 require string method = "query";

        //query table
        //kant_stat / kant_property
        2 require string dataid;

        3 require string date;

        4 require string tflag1;
        5 require string tflag2;

        //query conditions
        6 require vector<Condition> conditions;

        //stat item
        //kant_stat     ["succ_count", "timeout_count", 'exce_count", "total_time"]
        //kant_property ["value"]
        7 require vector<string> indexs;

        //group field
        //kant_stat     [f_date、master_name/interface_name/master_ip/slave_ip] or [f_tflag]
        //kant_property [f_date、master_name/master_ip/property_name/policy] or [f_tflag]
        8 require vector<string> groupby;
    };

    struct MonitorQueryRsp
    {

        0 require int ret;                              //0: succ, -1: error
        1 optional string msg;
        2 require string lastTime;
        3 require int activeDb;
        4 require int totalDb;
        5 require vector<int> retThreads;
        6 optional map<string, vector<double>> result;    //key: group1,group2,group3...
    };

    interface MonitorQuery
    {
        int query(MonitorQueryReq req, out MonitorQueryRsp rsp);
    };
};