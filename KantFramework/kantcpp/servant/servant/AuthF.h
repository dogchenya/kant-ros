// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __AUTHF_H_
#define __AUTHF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{
    enum AUTH_STATE
    {
        AUTH_INIT = -127,
        AUTH_SUCC = 0,
        AUTH_PROTO_ERR = -100,
        AUTH_WRONG_OBJ = -101,
        AUTH_WRONG_AK = -102,
        AUTH_WRONG_TIME = -103,
        AUTH_NOT_SUPPORT_ENC = -104,
        AUTH_DEC_FAIL = -105,
        AUTH_ERROR = -106,
    };
    inline string etos(const AUTH_STATE & e)
    {
        switch(e)
        {
            case AUTH_INIT: return "AUTH_INIT";
            case AUTH_SUCC: return "AUTH_SUCC";
            case AUTH_PROTO_ERR: return "AUTH_PROTO_ERR";
            case AUTH_WRONG_OBJ: return "AUTH_WRONG_OBJ";
            case AUTH_WRONG_AK: return "AUTH_WRONG_AK";
            case AUTH_WRONG_TIME: return "AUTH_WRONG_TIME";
            case AUTH_NOT_SUPPORT_ENC: return "AUTH_NOT_SUPPORT_ENC";
            case AUTH_DEC_FAIL: return "AUTH_DEC_FAIL";
            case AUTH_ERROR: return "AUTH_ERROR";
            default: return "";
        }
    }
    inline int stoe(const string & s, AUTH_STATE & e)
    {
        if(s == "AUTH_INIT")  { e=AUTH_INIT; return 0;}
        if(s == "AUTH_SUCC")  { e=AUTH_SUCC; return 0;}
        if(s == "AUTH_PROTO_ERR")  { e=AUTH_PROTO_ERR; return 0;}
        if(s == "AUTH_WRONG_OBJ")  { e=AUTH_WRONG_OBJ; return 0;}
        if(s == "AUTH_WRONG_AK")  { e=AUTH_WRONG_AK; return 0;}
        if(s == "AUTH_WRONG_TIME")  { e=AUTH_WRONG_TIME; return 0;}
        if(s == "AUTH_NOT_SUPPORT_ENC")  { e=AUTH_NOT_SUPPORT_ENC; return 0;}
        if(s == "AUTH_DEC_FAIL")  { e=AUTH_DEC_FAIL; return 0;}
        if(s == "AUTH_ERROR")  { e=AUTH_ERROR; return 0;}

        return -1;
    }

    enum AUTH_TYPE
    {
        AUTH_TYPENONE = 0,
        AUTH_TYPELOCAL = 1,
    };
    inline string etos(const AUTH_TYPE & e)
    {
        switch(e)
        {
            case AUTH_TYPENONE: return "AUTH_TYPENONE";
            case AUTH_TYPELOCAL: return "AUTH_TYPELOCAL";
            default: return "";
        }
    }
    inline int stoe(const string & s, AUTH_TYPE & e)
    {
        if(s == "AUTH_TYPENONE")  { e=AUTH_TYPENONE; return 0;}
        if(s == "AUTH_TYPELOCAL")  { e=AUTH_TYPELOCAL; return 0;}

        return -1;
    }

    struct BasicAuthInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.BasicAuthInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        BasicAuthInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sObjName = "";
            sAccessKey = "";
            sSecretKey = "";
            sHashSecretKey2 = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            if (sObjName != "")
            {
                _os.write(sObjName, 1);
            }
            if (sAccessKey != "")
            {
                _os.write(sAccessKey, 2);
            }
            if (sSecretKey != "")
            {
                _os.write(sSecretKey, 3);
            }
            if (sHashSecretKey2 != "")
            {
                _os.write(sHashSecretKey2, 4);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sObjName, 1, false);
            _is.read(sAccessKey, 2, false);
            _is.read(sSecretKey, 3, false);
            _is.read(sHashSecretKey2, 4, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sObjName"] = kant::JsonOutput::writeJson(sObjName);
            p->value["sAccessKey"] = kant::JsonOutput::writeJson(sAccessKey);
            p->value["sSecretKey"] = kant::JsonOutput::writeJson(sSecretKey);
            p->value["sHashSecretKey2"] = kant::JsonOutput::writeJson(sHashSecretKey2);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sObjName,pObj->value["sObjName"], false);
            kant::JsonInput::readJson(sAccessKey,pObj->value["sAccessKey"], false);
            kant::JsonInput::readJson(sSecretKey,pObj->value["sSecretKey"], false);
            kant::JsonInput::readJson(sHashSecretKey2,pObj->value["sHashSecretKey2"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sObjName,"sObjName");
            _ds.display(sAccessKey,"sAccessKey");
            _ds.display(sSecretKey,"sSecretKey");
            _ds.display(sHashSecretKey2,"sHashSecretKey2");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sObjName, true);
            _ds.displaySimple(sAccessKey, true);
            _ds.displaySimple(sSecretKey, true);
            _ds.displaySimple(sHashSecretKey2, false);
            return _os;
        }
    public:
        std::string sObjName;
        std::string sAccessKey;
        std::string sSecretKey;
        std::string sHashSecretKey2;
    };
    inline bool operator==(const BasicAuthInfo&l, const BasicAuthInfo&r)
    {
        return l.sObjName == r.sObjName && l.sAccessKey == r.sAccessKey && l.sSecretKey == r.sSecretKey && l.sHashSecretKey2 == r.sHashSecretKey2;
    }
    inline bool operator!=(const BasicAuthInfo&l, const BasicAuthInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const BasicAuthInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,BasicAuthInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct BasicAuthPackage : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.BasicAuthPackage";
        }
        static string MD5()
        {
            return "d445a7619f9c0307f245c2c39e0d44c8";
        }
        BasicAuthPackage()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sObjName = "";
            sAccessKey = "";
            iTime = 0;
            sHashMethod = "sha1";
            sSignature = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sObjName, 1);
            _os.write(sAccessKey, 2);
            _os.write(iTime, 3);
            if (sHashMethod != "sha1")
            {
                _os.write(sHashMethod, 4);
            }
            if (sSignature != "")
            {
                _os.write(sSignature, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sObjName, 1, true);
            _is.read(sAccessKey, 2, true);
            _is.read(iTime, 3, true);
            _is.read(sHashMethod, 4, false);
            _is.read(sSignature, 5, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sObjName"] = kant::JsonOutput::writeJson(sObjName);
            p->value["sAccessKey"] = kant::JsonOutput::writeJson(sAccessKey);
            p->value["iTime"] = kant::JsonOutput::writeJson(iTime);
            p->value["sHashMethod"] = kant::JsonOutput::writeJson(sHashMethod);
            p->value["sSignature"] = kant::JsonOutput::writeJson(sSignature);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sObjName,pObj->value["sObjName"], true);
            kant::JsonInput::readJson(sAccessKey,pObj->value["sAccessKey"], true);
            kant::JsonInput::readJson(iTime,pObj->value["iTime"], true);
            kant::JsonInput::readJson(sHashMethod,pObj->value["sHashMethod"], false);
            kant::JsonInput::readJson(sSignature,pObj->value["sSignature"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sObjName,"sObjName");
            _ds.display(sAccessKey,"sAccessKey");
            _ds.display(iTime,"iTime");
            _ds.display(sHashMethod,"sHashMethod");
            _ds.display(sSignature,"sSignature");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sObjName, true);
            _ds.displaySimple(sAccessKey, true);
            _ds.displaySimple(iTime, true);
            _ds.displaySimple(sHashMethod, true);
            _ds.displaySimple(sSignature, false);
            return _os;
        }
    public:
        std::string sObjName;
        std::string sAccessKey;
        kant::Int64 iTime;
        std::string sHashMethod;
        std::string sSignature;
    };
    inline bool operator==(const BasicAuthPackage&l, const BasicAuthPackage&r)
    {
        return l.sObjName == r.sObjName && l.sAccessKey == r.sAccessKey && l.iTime == r.iTime && l.sHashMethod == r.sHashMethod && l.sSignature == r.sSignature;
    }
    inline bool operator!=(const BasicAuthPackage&l, const BasicAuthPackage&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const BasicAuthPackage&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,BasicAuthPackage&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct TokenKey : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.TokenKey";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        TokenKey()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sApplication = "";
            sServer = "";
            sObjName = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sApplication, 1);
            _os.write(sServer, 2);
            _os.write(sObjName, 3);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sApplication, 1, true);
            _is.read(sServer, 2, true);
            _is.read(sObjName, 3, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sApplication"] = kant::JsonOutput::writeJson(sApplication);
            p->value["sServer"] = kant::JsonOutput::writeJson(sServer);
            p->value["sObjName"] = kant::JsonOutput::writeJson(sObjName);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sApplication,pObj->value["sApplication"], true);
            kant::JsonInput::readJson(sServer,pObj->value["sServer"], true);
            kant::JsonInput::readJson(sObjName,pObj->value["sObjName"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sApplication,"sApplication");
            _ds.display(sServer,"sServer");
            _ds.display(sObjName,"sObjName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sApplication, true);
            _ds.displaySimple(sServer, true);
            _ds.displaySimple(sObjName, false);
            return _os;
        }
    public:
        std::string sApplication;
        std::string sServer;
        std::string sObjName;
    };
    inline bool operator==(const TokenKey&l, const TokenKey&r)
    {
        return l.sApplication == r.sApplication && l.sServer == r.sServer && l.sObjName == r.sObjName;
    }
    inline bool operator!=(const TokenKey&l, const TokenKey&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const TokenKey&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,TokenKey&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct AuthRequest : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.AuthRequest";
        }
        static string MD5()
        {
            return "e69cda7537eb935e9233fc01c0a43b5f";
        }
        AuthRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sKey.resetDefautlt();
            sToken = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
            _os.write(sToken, 2);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
            _is.read(sToken, 2, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sKey"] = kant::JsonOutput::writeJson(sKey);
            p->value["sToken"] = kant::JsonOutput::writeJson(sToken);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sKey,pObj->value["sKey"], true);
            kant::JsonInput::readJson(sToken,pObj->value["sToken"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            _ds.display(sToken,"sToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, true);
            _ds.displaySimple(sToken, false);
            return _os;
        }
    public:
        kant::TokenKey sKey;
        std::string sToken;
    };
    inline bool operator==(const AuthRequest&l, const AuthRequest&r)
    {
        return l.sKey == r.sKey && l.sToken == r.sToken;
    }
    inline bool operator!=(const AuthRequest&l, const AuthRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const AuthRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,AuthRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct TokenRequest : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.TokenRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        TokenRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            vObjName.clear();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(vObjName, 1);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vObjName, 1, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["vObjName"] = kant::JsonOutput::writeJson(vObjName);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(vObjName,pObj->value["vObjName"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(vObjName,"vObjName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(vObjName, false);
            return _os;
        }
    public:
        vector<std::string> vObjName;
    };
    inline bool operator==(const TokenRequest&l, const TokenRequest&r)
    {
        return l.vObjName == r.vObjName;
    }
    inline bool operator!=(const TokenRequest&l, const TokenRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const TokenRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,TokenRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct TokenResponse : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.TokenResponse";
        }
        static string MD5()
        {
            return "de50d7cd52dae5ef0d013ba49ccdf1a6";
        }
        TokenResponse()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sObjName = "";
            mTokens.clear();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sObjName, 1);
            _os.write(mTokens, 2);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sObjName, 1, true);
            _is.read(mTokens, 2, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sObjName"] = kant::JsonOutput::writeJson(sObjName);
            p->value["mTokens"] = kant::JsonOutput::writeJson(mTokens);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sObjName,pObj->value["sObjName"], true);
            kant::JsonInput::readJson(mTokens,pObj->value["mTokens"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sObjName,"sObjName");
            _ds.display(mTokens,"mTokens");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sObjName, true);
            _ds.displaySimple(mTokens, false);
            return _os;
        }
    public:
        std::string sObjName;
        map<std::string, std::string> mTokens;
    };
    inline bool operator==(const TokenResponse&l, const TokenResponse&r)
    {
        return l.sObjName == r.sObjName && l.mTokens == r.mTokens;
    }
    inline bool operator!=(const TokenResponse&l, const TokenResponse&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const TokenResponse&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,TokenResponse&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct ApplyTokenRequest : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.ApplyTokenRequest";
        }
        static string MD5()
        {
            return "2e733cd457c52b3e80c221518a210850";
        }
        ApplyTokenRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sKey.resetDefautlt();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sKey"] = kant::JsonOutput::writeJson(sKey);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sKey,pObj->value["sKey"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, false);
            return _os;
        }
    public:
        kant::TokenKey sKey;
    };
    inline bool operator==(const ApplyTokenRequest&l, const ApplyTokenRequest&r)
    {
        return l.sKey == r.sKey;
    }
    inline bool operator!=(const ApplyTokenRequest&l, const ApplyTokenRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ApplyTokenRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ApplyTokenRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct ApplyTokenResponse : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.ApplyTokenResponse";
        }
        static string MD5()
        {
            return "e69cda7537eb935e9233fc01c0a43b5f";
        }
        ApplyTokenResponse()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sKey.resetDefautlt();
            sToken = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
            _os.write(sToken, 2);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
            _is.read(sToken, 2, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sKey"] = kant::JsonOutput::writeJson(sKey);
            p->value["sToken"] = kant::JsonOutput::writeJson(sToken);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sKey,pObj->value["sKey"], true);
            kant::JsonInput::readJson(sToken,pObj->value["sToken"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            _ds.display(sToken,"sToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, true);
            _ds.displaySimple(sToken, false);
            return _os;
        }
    public:
        kant::TokenKey sKey;
        std::string sToken;
    };
    inline bool operator==(const ApplyTokenResponse&l, const ApplyTokenResponse&r)
    {
        return l.sKey == r.sKey && l.sToken == r.sToken;
    }
    inline bool operator!=(const ApplyTokenResponse&l, const ApplyTokenResponse&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ApplyTokenResponse&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ApplyTokenResponse&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct DeleteTokenRequest : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.DeleteTokenRequest";
        }
        static string MD5()
        {
            return "2e733cd457c52b3e80c221518a210850";
        }
        DeleteTokenRequest()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sKey.resetDefautlt();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sKey"] = kant::JsonOutput::writeJson(sKey);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sKey,pObj->value["sKey"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, false);
            return _os;
        }
    public:
        kant::TokenKey sKey;
    };
    inline bool operator==(const DeleteTokenRequest&l, const DeleteTokenRequest&r)
    {
        return l.sKey == r.sKey;
    }
    inline bool operator!=(const DeleteTokenRequest&l, const DeleteTokenRequest&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const DeleteTokenRequest&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,DeleteTokenRequest&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class AuthPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~AuthPrxCallback(){}
        virtual void callback_applyToken(const kant::ApplyTokenResponse& ret)
        { throw std::runtime_error("callback_applyToken() override incorrect."); }
        virtual void callback_applyToken_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_applyToken_exception() override incorrect."); }

        virtual void callback_authProcess(kant::Int32 ret)
        { throw std::runtime_error("callback_authProcess() override incorrect."); }
        virtual void callback_authProcess_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_authProcess_exception() override incorrect."); }

        virtual void callback_deleteToken(kant::Int32 ret)
        { throw std::runtime_error("callback_deleteToken() override incorrect."); }
        virtual void callback_deleteToken_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_deleteToken_exception() override incorrect."); }

        virtual void callback_getTokens(const vector<kant::TokenResponse>& ret)
        { throw std::runtime_error("callback_getTokens() override incorrect."); }
        virtual void callback_getTokens_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getTokens_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };
            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::ApplyTokenResponse _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_applyToken(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_authProcess(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_deleteToken(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    vector<kant::TokenResponse> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getTokens(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<AuthPrxCallback> AuthPrxCallbackPtr;

    //callback of promise async proxy for client
    class AuthPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~AuthPrxCallbackPromise(){}
    public:
        struct PromiseapplyToken
        {
        public:
            kant::ApplyTokenResponse _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AuthPrxCallbackPromise::PromiseapplyToken > PromiseapplyTokenPtr;

        AuthPrxCallbackPromise(const kant::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > &promise)
        : _promise_applyToken(promise)
        {}
        
        virtual void callback_applyToken(const AuthPrxCallbackPromise::PromiseapplyTokenPtr &ptr)
        {
            _promise_applyToken.setValue(ptr);
        }
        virtual void callback_applyToken_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:applyToken_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_applyToken.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > _promise_applyToken;

    public:
        struct PromiseauthProcess
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AuthPrxCallbackPromise::PromiseauthProcess > PromiseauthProcessPtr;

        AuthPrxCallbackPromise(const kant::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > &promise)
        : _promise_authProcess(promise)
        {}
        
        virtual void callback_authProcess(const AuthPrxCallbackPromise::PromiseauthProcessPtr &ptr)
        {
            _promise_authProcess.setValue(ptr);
        }
        virtual void callback_authProcess_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:authProcess_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_authProcess.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > _promise_authProcess;

    public:
        struct PromisedeleteToken
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AuthPrxCallbackPromise::PromisedeleteToken > PromisedeleteTokenPtr;

        AuthPrxCallbackPromise(const kant::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > &promise)
        : _promise_deleteToken(promise)
        {}
        
        virtual void callback_deleteToken(const AuthPrxCallbackPromise::PromisedeleteTokenPtr &ptr)
        {
            _promise_deleteToken.setValue(ptr);
        }
        virtual void callback_deleteToken_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:deleteToken_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_deleteToken.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > _promise_deleteToken;

    public:
        struct PromisegetTokens
        {
        public:
            vector<kant::TokenResponse> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AuthPrxCallbackPromise::PromisegetTokens > PromisegetTokensPtr;

        AuthPrxCallbackPromise(const kant::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > &promise)
        : _promise_getTokens(promise)
        {}
        
        virtual void callback_getTokens(const AuthPrxCallbackPromise::PromisegetTokensPtr &ptr)
        {
            _promise_getTokens.setValue(ptr);
        }
        virtual void callback_getTokens_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getTokens_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getTokens.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > _promise_getTokens;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AuthPrxCallbackPromise::PromiseapplyTokenPtr ptr = std::make_shared<AuthPrxCallbackPromise::PromiseapplyToken>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_applyToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_applyToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_applyToken(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AuthPrxCallbackPromise::PromiseauthProcessPtr ptr = std::make_shared<AuthPrxCallbackPromise::PromiseauthProcess>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_authProcess_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_authProcess_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_authProcess(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AuthPrxCallbackPromise::PromisedeleteTokenPtr ptr = std::make_shared<AuthPrxCallbackPromise::PromisedeleteToken>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deleteToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deleteToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_deleteToken(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AuthPrxCallbackPromise::PromisegetTokensPtr ptr = std::make_shared<AuthPrxCallbackPromise::PromisegetTokens>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getTokens_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getTokens_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getTokens(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<AuthPrxCallbackPromise> AuthPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class AuthCoroPrxCallback: public AuthPrxCallback
    {
    public:
        virtual ~AuthCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::ApplyTokenResponse _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_applyToken(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_applyToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_applyToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_authProcess(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_authProcess_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_authProcess_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_deleteToken(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deleteToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deleteToken_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        vector<kant::TokenResponse> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_getTokens(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getTokens_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getTokens_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<AuthCoroPrxCallback> AuthCoroPrxCallbackPtr;

    /* proxy for client */
    class AuthProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        AuthProxy(Communicator* pCommunicator, const string& name, const string& setName)
                : ServantProxy(pCommunicator, name, setName) {}

        kant::ApplyTokenResponse applyToken(const kant::ApplyTokenRequest & request,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"applyToken", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::ApplyTokenResponse _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_applyToken(AuthPrxCallbackPtr callback,const kant::ApplyTokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"applyToken", _os, context, _mStatus, callback);
        }
        
        kant::Future< AuthPrxCallbackPromise::PromiseapplyTokenPtr > promise_async_applyToken(const kant::ApplyTokenRequest &request,const map<string, string>& context)
        {
            kant::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > promise;
            AuthPrxCallbackPromisePtr callback = std::make_shared<AuthPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"applyToken", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_applyToken(AuthCoroPrxCallbackPtr callback,const kant::ApplyTokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"applyToken", _os, context, _mStatus, callback, true);
        }

        kant::Int32 authProcess(const kant::AuthRequest & request,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"authProcess", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_authProcess(AuthPrxCallbackPtr callback,const kant::AuthRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"authProcess", _os, context, _mStatus, callback);
        }
        
        kant::Future< AuthPrxCallbackPromise::PromiseauthProcessPtr > promise_async_authProcess(const kant::AuthRequest &request,const map<string, string>& context)
        {
            kant::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > promise;
            AuthPrxCallbackPromisePtr callback = std::make_shared<AuthPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"authProcess", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_authProcess(AuthCoroPrxCallbackPtr callback,const kant::AuthRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"authProcess", _os, context, _mStatus, callback, true);
        }

        kant::Int32 deleteToken(const kant::DeleteTokenRequest & request,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"deleteToken", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_deleteToken(AuthPrxCallbackPtr callback,const kant::DeleteTokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deleteToken", _os, context, _mStatus, callback);
        }
        
        kant::Future< AuthPrxCallbackPromise::PromisedeleteTokenPtr > promise_async_deleteToken(const kant::DeleteTokenRequest &request,const map<string, string>& context)
        {
            kant::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > promise;
            AuthPrxCallbackPromisePtr callback = std::make_shared<AuthPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deleteToken", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_deleteToken(AuthCoroPrxCallbackPtr callback,const kant::DeleteTokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deleteToken", _os, context, _mStatus, callback, true);
        }

        vector<kant::TokenResponse> getTokens(const kant::TokenRequest & request,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getTokens", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            vector<kant::TokenResponse> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getTokens(AuthPrxCallbackPtr callback,const kant::TokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getTokens", _os, context, _mStatus, callback);
        }
        
        kant::Future< AuthPrxCallbackPromise::PromisegetTokensPtr > promise_async_getTokens(const kant::TokenRequest &request,const map<string, string>& context)
        {
            kant::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > promise;
            AuthPrxCallbackPromisePtr callback = std::make_shared<AuthPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getTokens", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getTokens(AuthCoroPrxCallbackPtr callback,const kant::TokenRequest &request,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getTokens", _os, context, _mStatus, callback, true);
        }

        AuthProxy* kant_hash(int64_t key)
        {
            return (AuthProxy*)ServantProxy::kant_hash(key);
        }

        AuthProxy* kant_consistent_hash(int64_t key)
        {
            return (AuthProxy*)ServantProxy::kant_consistent_hash(key);
        }

        AuthProxy* kant_open_trace(bool traceParam = false)
        {
            return (AuthProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        AuthProxy* kant_set_timeout(int msecond)
        {
            return (AuthProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "AuthProxy"; }
    };
    typedef std::shared_ptr<AuthProxy> AuthPrx;

    /* servant for server */
    class Auth : public kant::Servant
    {
    public:
        virtual ~Auth(){}
        virtual kant::ApplyTokenResponse applyToken(const kant::ApplyTokenRequest & request,kant::KantCurrentPtr current) = 0;
        static void async_response_applyToken(kant::KantCurrentPtr current, const kant::ApplyTokenResponse &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 authProcess(const kant::AuthRequest & request,kant::KantCurrentPtr current) = 0;
        static void async_response_authProcess(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 deleteToken(const kant::DeleteTokenRequest & request,kant::KantCurrentPtr current) = 0;
        static void async_response_deleteToken(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual vector<kant::TokenResponse> getTokens(const kant::TokenRequest & request,kant::KantCurrentPtr current) = 0;
        static void async_response_getTokens(kant::KantCurrentPtr current, const vector<kant::TokenResponse> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__kant__Auth_all, __kant__Auth_all+4, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__Auth_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ApplyTokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("request", request);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    kant::ApplyTokenResponse _ret = applyToken(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::AuthRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("request", request);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    kant::Int32 _ret = authProcess(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::DeleteTokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("request", request);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    kant::Int32 _ret = deleteToken(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::TokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("request", request);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(request, _jsonPtr->value["request"], true);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    vector<kant::TokenResponse> _ret = getTokens(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
