// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __REGISTRY_H_
#define __REGISTRY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "NodeDescriptor.h"
#include "RegistryDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{
    struct PatchResult : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.PatchResult";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        PatchResult()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sApplication = "";
            sServerName = "";
            sNodeName = "";
            sVersion = "";
            sUserName = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(sApplication, 0);
            _os.write(sServerName, 1);
            _os.write(sNodeName, 2);
            _os.write(sVersion, 3);
            _os.write(sUserName, 4);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sApplication, 0, true);
            _is.read(sServerName, 1, true);
            _is.read(sNodeName, 2, true);
            _is.read(sVersion, 3, true);
            _is.read(sUserName, 4, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sApplication"] = kant::JsonOutput::writeJson(sApplication);
            p->value["sServerName"] = kant::JsonOutput::writeJson(sServerName);
            p->value["sNodeName"] = kant::JsonOutput::writeJson(sNodeName);
            p->value["sVersion"] = kant::JsonOutput::writeJson(sVersion);
            p->value["sUserName"] = kant::JsonOutput::writeJson(sUserName);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sApplication,pObj->value["sApplication"], true);
            kant::JsonInput::readJson(sServerName,pObj->value["sServerName"], true);
            kant::JsonInput::readJson(sNodeName,pObj->value["sNodeName"], true);
            kant::JsonInput::readJson(sVersion,pObj->value["sVersion"], true);
            kant::JsonInput::readJson(sUserName,pObj->value["sUserName"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sApplication,"sApplication");
            _ds.display(sServerName,"sServerName");
            _ds.display(sNodeName,"sNodeName");
            _ds.display(sVersion,"sVersion");
            _ds.display(sUserName,"sUserName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sApplication, true);
            _ds.displaySimple(sServerName, true);
            _ds.displaySimple(sNodeName, true);
            _ds.displaySimple(sVersion, true);
            _ds.displaySimple(sUserName, false);
            return _os;
        }
    public:
        std::string sApplication;
        std::string sServerName;
        std::string sNodeName;
        std::string sVersion;
        std::string sUserName;
    };
    inline bool operator==(const PatchResult&l, const PatchResult&r)
    {
        return l.sApplication == r.sApplication && l.sServerName == r.sServerName && l.sNodeName == r.sNodeName && l.sVersion == r.sVersion && l.sUserName == r.sUserName;
    }
    inline bool operator!=(const PatchResult&l, const PatchResult&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const PatchResult&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,PatchResult&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct BaseImageInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.BaseImageInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        BaseImageInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            id = "";
            image = "";
            registryId = "";
            sha = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            if (id != "")
            {
                _os.write(id, 0);
            }
            if (image != "")
            {
                _os.write(image, 1);
            }
            if (registryId != "")
            {
                _os.write(registryId, 2);
            }
            if (sha != "")
            {
                _os.write(sha, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(image, 1, false);
            _is.read(registryId, 2, false);
            _is.read(sha, 3, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["id"] = kant::JsonOutput::writeJson(id);
            p->value["image"] = kant::JsonOutput::writeJson(image);
            p->value["registryId"] = kant::JsonOutput::writeJson(registryId);
            p->value["sha"] = kant::JsonOutput::writeJson(sha);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(id,pObj->value["id"], false);
            kant::JsonInput::readJson(image,pObj->value["image"], false);
            kant::JsonInput::readJson(registryId,pObj->value["registryId"], false);
            kant::JsonInput::readJson(sha,pObj->value["sha"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(image,"image");
            _ds.display(registryId,"registryId");
            _ds.display(sha,"sha");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(image, true);
            _ds.displaySimple(registryId, true);
            _ds.displaySimple(sha, false);
            return _os;
        }
    public:
        std::string id;
        std::string image;
        std::string registryId;
        std::string sha;
    };
    inline bool operator==(const BaseImageInfo&l, const BaseImageInfo&r)
    {
        return l.id == r.id && l.image == r.image && l.registryId == r.registryId && l.sha == r.sha;
    }
    inline bool operator!=(const BaseImageInfo&l, const BaseImageInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const BaseImageInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,BaseImageInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct DockerRegistry : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.DockerRegistry";
        }
        static string MD5()
        {
            return "65ce43a02b9384314cdd5e2c53518be9";
        }
        DockerRegistry()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            sId = "";
            sRegistry = "";
            sUserName = "";
            sPassword = "";
            bSucc = false;
            baseImages.clear();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            if (sId != "")
            {
                _os.write(sId, 0);
            }
            if (sRegistry != "")
            {
                _os.write(sRegistry, 1);
            }
            if (sUserName != "")
            {
                _os.write(sUserName, 2);
            }
            if (sPassword != "")
            {
                _os.write(sPassword, 3);
            }
            if (bSucc != false)
            {
                _os.write(bSucc, 4);
            }
            if (baseImages.size() > 0)
            {
                _os.write(baseImages, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sId, 0, false);
            _is.read(sRegistry, 1, false);
            _is.read(sUserName, 2, false);
            _is.read(sPassword, 3, false);
            _is.read(bSucc, 4, false);
            _is.read(baseImages, 5, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["sId"] = kant::JsonOutput::writeJson(sId);
            p->value["sRegistry"] = kant::JsonOutput::writeJson(sRegistry);
            p->value["sUserName"] = kant::JsonOutput::writeJson(sUserName);
            p->value["sPassword"] = kant::JsonOutput::writeJson(sPassword);
            p->value["bSucc"] = kant::JsonOutput::writeJson(bSucc);
            p->value["baseImages"] = kant::JsonOutput::writeJson(baseImages);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(sId,pObj->value["sId"], false);
            kant::JsonInput::readJson(sRegistry,pObj->value["sRegistry"], false);
            kant::JsonInput::readJson(sUserName,pObj->value["sUserName"], false);
            kant::JsonInput::readJson(sPassword,pObj->value["sPassword"], false);
            kant::JsonInput::readJson(bSucc,pObj->value["bSucc"], false);
            kant::JsonInput::readJson(baseImages,pObj->value["baseImages"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(sId,"sId");
            _ds.display(sRegistry,"sRegistry");
            _ds.display(sUserName,"sUserName");
            _ds.display(sPassword,"sPassword");
            _ds.display(bSucc,"bSucc");
            _ds.display(baseImages,"baseImages");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(sRegistry, true);
            _ds.displaySimple(sUserName, true);
            _ds.displaySimple(sPassword, true);
            _ds.displaySimple(bSucc, true);
            _ds.displaySimple(baseImages, false);
            return _os;
        }
    public:
        std::string sId;
        std::string sRegistry;
        std::string sUserName;
        std::string sPassword;
        kant::Bool bSucc;
        vector<kant::BaseImageInfo> baseImages;
    };
    inline bool operator==(const DockerRegistry&l, const DockerRegistry&r)
    {
        return l.sId == r.sId && l.sRegistry == r.sRegistry && l.sUserName == r.sUserName && l.sPassword == r.sPassword && l.bSucc == r.bSucc && l.baseImages == r.baseImages;
    }
    inline bool operator!=(const DockerRegistry&l, const DockerRegistry&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const DockerRegistry&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,DockerRegistry&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct FrameworkKey : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.FrameworkKey";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FrameworkKey()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            cuid = "";
            priKey = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            if (cuid != "")
            {
                _os.write(cuid, 0);
            }
            if (priKey != "")
            {
                _os.write(priKey, 1);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cuid, 0, false);
            _is.read(priKey, 1, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["cuid"] = kant::JsonOutput::writeJson(cuid);
            p->value["priKey"] = kant::JsonOutput::writeJson(priKey);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(cuid,pObj->value["cuid"], false);
            kant::JsonInput::readJson(priKey,pObj->value["priKey"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(cuid,"cuid");
            _ds.display(priKey,"priKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(cuid, true);
            _ds.displaySimple(priKey, false);
            return _os;
        }
    public:
        std::string cuid;
        std::string priKey;
    };
    inline bool operator==(const FrameworkKey&l, const FrameworkKey&r)
    {
        return l.cuid == r.cuid && l.priKey == r.priKey;
    }
    inline bool operator!=(const FrameworkKey&l, const FrameworkKey&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const FrameworkKey&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,FrameworkKey&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class RegistryPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallback(){}
        virtual void callback_destroyNode(kant::Int32 ret)
        { throw std::runtime_error("callback_destroyNode() override incorrect."); }
        virtual void callback_destroyNode_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_destroyNode_exception() override incorrect."); }

        virtual void callback_dockerPull(kant::Int32 ret)
        { throw std::runtime_error("callback_dockerPull() override incorrect."); }
        virtual void callback_dockerPull_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_dockerPull_exception() override incorrect."); }

        virtual void callback_getClientIp(kant::Int32 ret,  const std::string& sClientIp)
        { throw std::runtime_error("callback_getClientIp() override incorrect."); }
        virtual void callback_getClientIp_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getClientIp_exception() override incorrect."); }

        virtual void callback_getDockerRegistry(kant::Int32 ret,  const vector<kant::DockerRegistry>& doctorRegistries)
        { throw std::runtime_error("callback_getDockerRegistry() override incorrect."); }
        virtual void callback_getDockerRegistry_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getDockerRegistry_exception() override incorrect."); }

        virtual void callback_getFrameworkKey(kant::Int32 ret,  const kant::FrameworkKey& fKey)
        { throw std::runtime_error("callback_getFrameworkKey() override incorrect."); }
        virtual void callback_getFrameworkKey_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getFrameworkKey_exception() override incorrect."); }

        virtual void callback_getNodeTemplate(kant::Int32 ret,  const std::string& profileTemplate)
        { throw std::runtime_error("callback_getNodeTemplate() override incorrect."); }
        virtual void callback_getNodeTemplate_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getNodeTemplate_exception() override incorrect."); }

        virtual void callback_getServers(const vector<kant::ServerDescriptor>& ret)
        { throw std::runtime_error("callback_getServers() override incorrect."); }
        virtual void callback_getServers_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getServers_exception() override incorrect."); }

        virtual void callback_keepAlive(kant::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_registerNode(kant::Int32 ret)
        { throw std::runtime_error("callback_registerNode() override incorrect."); }
        virtual void callback_registerNode_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_registerNode_exception() override incorrect."); }

        virtual void callback_reportVersion(kant::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

        virtual void callback_updatePatchResult(kant::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult() override incorrect."); }
        virtual void callback_updatePatchResult_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult_exception() override incorrect."); }

        virtual void callback_updateServer(kant::Int32 ret)
        { throw std::runtime_error("callback_updateServer() override incorrect."); }
        virtual void callback_updateServer_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_updateServer_exception() override incorrect."); }

        virtual void callback_updateServerBatch(kant::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch() override incorrect."); }
        virtual void callback_updateServerBatch_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };
            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+13, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_destroyNode(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_dockerPull(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string sClientIp;
                    _is.read(sClientIp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getClientIp(_ret, sClientIp);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<kant::DockerRegistry> doctorRegistries;
                    _is.read(doctorRegistries, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getDockerRegistry(_ret, doctorRegistries);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    kant::FrameworkKey fKey;
                    _is.read(fKey, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getFrameworkKey(_ret, fKey);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string profileTemplate;
                    _is.read(profileTemplate, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getNodeTemplate(_ret, profileTemplate);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    vector<kant::ServerDescriptor> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getServers(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_registerNode(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_reportVersion(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 10:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_updatePatchResult(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 11:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_updateServer(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 12:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_updateServerBatch(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<RegistryPrxCallback> RegistryPrxCallbackPtr;

    //callback of promise async proxy for client
    class RegistryPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallbackPromise(){}
    public:
        struct PromisedestroyNode
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisedestroyNode > PromisedestroyNodePtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > &promise)
        : _promise_destroyNode(promise)
        {}
        
        virtual void callback_destroyNode(const RegistryPrxCallbackPromise::PromisedestroyNodePtr &ptr)
        {
            _promise_destroyNode.setValue(ptr);
        }
        virtual void callback_destroyNode_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:destroyNode_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_destroyNode.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > _promise_destroyNode;

    public:
        struct PromisedockerPull
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisedockerPull > PromisedockerPullPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > &promise)
        : _promise_dockerPull(promise)
        {}
        
        virtual void callback_dockerPull(const RegistryPrxCallbackPromise::PromisedockerPullPtr &ptr)
        {
            _promise_dockerPull.setValue(ptr);
        }
        virtual void callback_dockerPull_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:dockerPull_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_dockerPull.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > _promise_dockerPull;

    public:
        struct PromisegetClientIp
        {
        public:
            kant::Int32 _ret;
            std::string sClientIp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisegetClientIp > PromisegetClientIpPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > &promise)
        : _promise_getClientIp(promise)
        {}
        
        virtual void callback_getClientIp(const RegistryPrxCallbackPromise::PromisegetClientIpPtr &ptr)
        {
            _promise_getClientIp.setValue(ptr);
        }
        virtual void callback_getClientIp_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getClientIp_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getClientIp.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > _promise_getClientIp;

    public:
        struct PromisegetDockerRegistry
        {
        public:
            kant::Int32 _ret;
            vector<kant::DockerRegistry> doctorRegistries;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisegetDockerRegistry > PromisegetDockerRegistryPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > &promise)
        : _promise_getDockerRegistry(promise)
        {}
        
        virtual void callback_getDockerRegistry(const RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr &ptr)
        {
            _promise_getDockerRegistry.setValue(ptr);
        }
        virtual void callback_getDockerRegistry_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getDockerRegistry_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getDockerRegistry.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > _promise_getDockerRegistry;

    public:
        struct PromisegetFrameworkKey
        {
        public:
            kant::Int32 _ret;
            kant::FrameworkKey fKey;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisegetFrameworkKey > PromisegetFrameworkKeyPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > &promise)
        : _promise_getFrameworkKey(promise)
        {}
        
        virtual void callback_getFrameworkKey(const RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr &ptr)
        {
            _promise_getFrameworkKey.setValue(ptr);
        }
        virtual void callback_getFrameworkKey_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getFrameworkKey_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getFrameworkKey.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > _promise_getFrameworkKey;

    public:
        struct PromisegetNodeTemplate
        {
        public:
            kant::Int32 _ret;
            std::string profileTemplate;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisegetNodeTemplate > PromisegetNodeTemplatePtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > &promise)
        : _promise_getNodeTemplate(promise)
        {}
        
        virtual void callback_getNodeTemplate(const RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr &ptr)
        {
            _promise_getNodeTemplate.setValue(ptr);
        }
        virtual void callback_getNodeTemplate_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getNodeTemplate_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getNodeTemplate.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > _promise_getNodeTemplate;

    public:
        struct PromisegetServers
        {
        public:
            vector<kant::ServerDescriptor> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisegetServers > PromisegetServersPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > &promise)
        : _promise_getServers(promise)
        {}
        
        virtual void callback_getServers(const RegistryPrxCallbackPromise::PromisegetServersPtr &ptr)
        {
            _promise_getServers.setValue(ptr);
        }
        virtual void callback_getServers_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getServers_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getServers.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > _promise_getServers;

    public:
        struct PromisekeepAlive
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const RegistryPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_keepAlive.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromiseregisterNode
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromiseregisterNode > PromiseregisterNodePtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > &promise)
        : _promise_registerNode(promise)
        {}
        
        virtual void callback_registerNode(const RegistryPrxCallbackPromise::PromiseregisterNodePtr &ptr)
        {
            _promise_registerNode.setValue(ptr);
        }
        virtual void callback_registerNode_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNode_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_registerNode.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > _promise_registerNode;

    public:
        struct PromisereportVersion
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const RegistryPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_reportVersion.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        struct PromiseupdatePatchResult
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromiseupdatePatchResult > PromiseupdatePatchResultPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > &promise)
        : _promise_updatePatchResult(promise)
        {}
        
        virtual void callback_updatePatchResult(const RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr &ptr)
        {
            _promise_updatePatchResult.setValue(ptr);
        }
        virtual void callback_updatePatchResult_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:updatePatchResult_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_updatePatchResult.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > _promise_updatePatchResult;

    public:
        struct PromiseupdateServer
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromiseupdateServer > PromiseupdateServerPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > &promise)
        : _promise_updateServer(promise)
        {}
        
        virtual void callback_updateServer(const RegistryPrxCallbackPromise::PromiseupdateServerPtr &ptr)
        {
            _promise_updateServer.setValue(ptr);
        }
        virtual void callback_updateServer_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServer_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_updateServer.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > _promise_updateServer;

    public:
        struct PromiseupdateServerBatch
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< RegistryPrxCallbackPromise::PromiseupdateServerBatch > PromiseupdateServerBatchPtr;

        RegistryPrxCallbackPromise(const kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > &promise)
        : _promise_updateServerBatch(promise)
        {}
        
        virtual void callback_updateServerBatch(const RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr &ptr)
        {
            _promise_updateServerBatch.setValue(ptr);
        }
        virtual void callback_updateServerBatch_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServerBatch_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_updateServerBatch.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > _promise_updateServerBatch;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+13, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisedestroyNodePtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisedestroyNode>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroyNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroyNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_destroyNode(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisedockerPullPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisedockerPull>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_dockerPull_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_dockerPull_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_dockerPull(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetClientIpPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisegetClientIp>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sClientIp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getClientIp(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisegetDockerRegistry>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->doctorRegistries, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getDockerRegistry_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getDockerRegistry_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getDockerRegistry(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisegetFrameworkKey>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->fKey, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getFrameworkKey_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getFrameworkKey_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getFrameworkKey(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisegetNodeTemplate>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->profileTemplate, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getNodeTemplate(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisegetServersPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisegetServers>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getServers(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAlivePtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisekeepAlive>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_keepAlive(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodePtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromiseregisterNode>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_registerNode(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromisereportVersionPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromisereportVersion>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_reportVersion(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 10:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromiseupdatePatchResult>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_updatePatchResult(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 11:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromiseupdateServer>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_updateServer(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 12:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr ptr = std::make_shared<RegistryPrxCallbackPromise::PromiseupdateServerBatch>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_updateServerBatch(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<RegistryPrxCallbackPromise> RegistryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class RegistryCoroPrxCallback: public RegistryPrxCallback
    {
    public:
        virtual ~RegistryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+13, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_destroyNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_destroyNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroyNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroyNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_dockerPull_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_dockerPull(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_dockerPull_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_dockerPull_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string sClientIp;
                        _is.read(sClientIp, 1, true);
                        setResponseContext(msg->response->context);

                        callback_getClientIp(_ret, sClientIp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getDockerRegistry_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<kant::DockerRegistry> doctorRegistries;
                        _is.read(doctorRegistries, 1, true);
                        setResponseContext(msg->response->context);

                        callback_getDockerRegistry(_ret, doctorRegistries);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getDockerRegistry_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getDockerRegistry_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getFrameworkKey_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        kant::FrameworkKey fKey;
                        _is.read(fKey, 1, true);
                        setResponseContext(msg->response->context);

                        callback_getFrameworkKey(_ret, fKey);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getFrameworkKey_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getFrameworkKey_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string profileTemplate;
                        _is.read(profileTemplate, 2, true);
                        setResponseContext(msg->response->context);

                        callback_getNodeTemplate(_ret, profileTemplate);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        vector<kant::ServerDescriptor> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_getServers(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_registerNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_reportVersion(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 10:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_updatePatchResult(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 11:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_updateServer(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 12:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_updateServerBatch(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<RegistryCoroPrxCallback> RegistryCoroPrxCallbackPtr;

    /* proxy for client */
    class RegistryProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        RegistryProxy(Communicator* pCommunicator, const string& name, const string& setName)
                : ServantProxy(pCommunicator, name, setName) {}

        kant::Int32 destroyNode(const std::string & nodeName,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"destroyNode", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_destroyNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"destroyNode", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisedestroyNodePtr > promise_async_destroyNode(const std::string &nodeName,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisedestroyNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"destroyNode", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_destroyNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"destroyNode", _os, context, _mStatus, callback, true);
        }

        kant::Int32 dockerPull(const std::string & baseImageId,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"dockerPull", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_dockerPull(RegistryPrxCallbackPtr callback,const std::string &baseImageId,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"dockerPull", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisedockerPullPtr > promise_async_dockerPull(const std::string &baseImageId,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisedockerPullPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"dockerPull", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_dockerPull(RegistryCoroPrxCallbackPtr callback,const std::string &baseImageId,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(baseImageId, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"dockerPull", _os, context, _mStatus, callback, true);
        }

        kant::Int32 getClientIp(std::string &sClientIp,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(sClientIp, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getClientIp", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sClientIp, 1, true);
            return _ret;
        }

        void async_getClientIp(RegistryPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getClientIp", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise_async_getClientIp(const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getClientIp", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getClientIp(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getClientIp", _os, context, _mStatus, callback, true);
        }

        kant::Int32 getDockerRegistry(vector<kant::DockerRegistry> &doctorRegistries,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(doctorRegistries, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getDockerRegistry", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(doctorRegistries, 1, true);
            return _ret;
        }

        void async_getDockerRegistry(RegistryPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getDockerRegistry", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > promise_async_getDockerRegistry(const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisegetDockerRegistryPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getDockerRegistry", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getDockerRegistry(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getDockerRegistry", _os, context, _mStatus, callback, true);
        }

        kant::Int32 getFrameworkKey(kant::FrameworkKey &fKey,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(fKey, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getFrameworkKey", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(fKey, 1, true);
            return _ret;
        }

        void async_getFrameworkKey(RegistryPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getFrameworkKey", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > promise_async_getFrameworkKey(const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisegetFrameworkKeyPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getFrameworkKey", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getFrameworkKey(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getFrameworkKey", _os, context, _mStatus, callback, true);
        }

        kant::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(profileTemplate, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getNodeTemplate", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(profileTemplate, 2, true);
            return _ret;
        }

        void async_getNodeTemplate(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getNodeTemplate", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise_async_getNodeTemplate(const std::string &nodeName,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getNodeTemplate", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getNodeTemplate(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getNodeTemplate", _os, context, _mStatus, callback, true);
        }

        vector<kant::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getServers", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            vector<kant::ServerDescriptor> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getServers(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getServers", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisegetServersPtr > promise_async_getServers(const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getServers", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getServers(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getServers", _os, context, _mStatus, callback, true);
        }

        kant::Int32 keepAlive(const std::string & nodeName,const kant::LoadInfo & load,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(RegistryPrxCallbackPtr callback,const std::string &nodeName,const kant::LoadInfo &load,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const std::string &nodeName,const kant::LoadInfo &load,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const kant::LoadInfo &load,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback, true);
        }

        kant::Int32 registerNode(const std::string & nodeName,const kant::NodeInfo & ni,const kant::LoadInfo & li,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"registerNode", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const kant::NodeInfo &ni,const kant::LoadInfo &li,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"registerNode", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise_async_registerNode(const std::string &nodeName,const kant::NodeInfo &ni,const kant::LoadInfo &li,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"registerNode", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const kant::NodeInfo &ni,const kant::LoadInfo &li,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"registerNode", _os, context, _mStatus, callback, true);
        }

        kant::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportVersion(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportVersion(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback, true);
        }

        kant::Int32 updatePatchResult(const kant::PatchResult & result,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"updatePatchResult", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updatePatchResult(RegistryPrxCallbackPtr callback,const kant::PatchResult &result,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updatePatchResult", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise_async_updatePatchResult(const kant::PatchResult &result,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updatePatchResult", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updatePatchResult(RegistryCoroPrxCallbackPtr callback,const kant::PatchResult &result,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updatePatchResult", _os, context, _mStatus, callback, true);
        }

        kant::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const kant::ServerStateInfo & state,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"updateServer", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServer(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const kant::ServerStateInfo &state,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServer", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise_async_updateServer(const std::string &app,const std::string &serverName,const std::string &nodeName,const kant::ServerStateInfo &state,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServer", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServer(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const kant::ServerStateInfo &state,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServer", _os, context, _mStatus, callback, true);
        }

        kant::Int32 updateServerBatch(const vector<kant::ServerStateInfo> & vState,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"updateServerBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServerBatch(RegistryPrxCallbackPtr callback,const vector<kant::ServerStateInfo> &vState,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServerBatch", _os, context, _mStatus, callback);
        }
        
        kant::Future< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise_async_updateServerBatch(const vector<kant::ServerStateInfo> &vState,const map<string, string>& context)
        {
            kant::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise;
            RegistryPrxCallbackPromisePtr callback = std::make_shared<RegistryPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServerBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServerBatch(RegistryCoroPrxCallbackPtr callback,const vector<kant::ServerStateInfo> &vState,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"updateServerBatch", _os, context, _mStatus, callback, true);
        }

        RegistryProxy* kant_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::kant_hash(key);
        }

        RegistryProxy* kant_consistent_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::kant_consistent_hash(key);
        }

        RegistryProxy* kant_open_trace(bool traceParam = false)
        {
            return (RegistryProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        RegistryProxy* kant_set_timeout(int msecond)
        {
            return (RegistryProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "RegistryProxy"; }
    };
    typedef std::shared_ptr<RegistryProxy> RegistryPrx;

    /* servant for server */
    class Registry : public kant::Servant
    {
    public:
        virtual ~Registry(){}
        virtual kant::Int32 destroyNode(const std::string & nodeName,kant::KantCurrentPtr current) = 0;
        static void async_response_destroyNode(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 dockerPull(const std::string & baseImageId,kant::KantCurrentPtr current) = 0;
        static void async_response_dockerPull(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 getClientIp(std::string &sClientIp,kant::KantCurrentPtr current) = 0;
        static void async_response_getClientIp(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &sClientIp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("sClientIp", sClientIp);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["sClientIp"] = kant::JsonOutput::writeJson(sClientIp);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(sClientIp, 1);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 getDockerRegistry(vector<kant::DockerRegistry> &doctorRegistries,kant::KantCurrentPtr current) = 0;
        static void async_response_getDockerRegistry(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<kant::DockerRegistry> &doctorRegistries)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("doctorRegistries", doctorRegistries);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["doctorRegistries"] = kant::JsonOutput::writeJson(doctorRegistries);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(doctorRegistries, 1);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 getFrameworkKey(kant::FrameworkKey &fKey,kant::KantCurrentPtr current) = 0;
        static void async_response_getFrameworkKey(kant::KantCurrentPtr current, kant::Int32 _ret, const kant::FrameworkKey &fKey)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("fKey", fKey);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["fKey"] = kant::JsonOutput::writeJson(fKey);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(fKey, 1);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,kant::KantCurrentPtr current) = 0;
        static void async_response_getNodeTemplate(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &profileTemplate)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("profileTemplate", profileTemplate);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["profileTemplate"] = kant::JsonOutput::writeJson(profileTemplate);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(profileTemplate, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual vector<kant::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,kant::KantCurrentPtr current) = 0;
        static void async_response_getServers(kant::KantCurrentPtr current, const vector<kant::ServerDescriptor> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 keepAlive(const std::string & nodeName,const kant::LoadInfo & load,kant::KantCurrentPtr current) = 0;
        static void async_response_keepAlive(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 registerNode(const std::string & nodeName,const kant::NodeInfo & ni,const kant::LoadInfo & li,kant::KantCurrentPtr current) = 0;
        static void async_response_registerNode(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,kant::KantCurrentPtr current) = 0;
        static void async_response_reportVersion(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 updatePatchResult(const kant::PatchResult & result,kant::KantCurrentPtr current) = 0;
        static void async_response_updatePatchResult(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const kant::ServerStateInfo & state,kant::KantCurrentPtr current) = 0;
        static void async_response_updateServer(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 updateServerBatch(const vector<kant::ServerStateInfo> & vState,kant::KantCurrentPtr current) = 0;
        static void async_response_updateServerBatch(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__Registry_all[]=
            {
                "destroyNode",
                "dockerPull",
                "getClientIp",
                "getDockerRegistry",
                "getFrameworkKey",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__kant__Registry_all, __kant__Registry_all+13, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__Registry_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("nodeName", nodeName);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                    }
                    kant::Int32 _ret = destroyNode(nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string baseImageId;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("baseImageId", baseImageId);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(baseImageId, _jsonPtr->value["baseImageId"], true);
                    }
                    else
                    {
                        _is.read(baseImageId, 1, true);
                    }
                    kant::Int32 _ret = dockerPull(baseImageId, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sClientIp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.getByDefault("sClientIp", sClientIp, sClientIp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(sClientIp, _jsonPtr->value["sClientIp"], false);
                    }
                    else
                    {
                        _is.read(sClientIp, 1, false);
                    }
                    kant::Int32 _ret = getClientIp(sClientIp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("sClientIp", sClientIp);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["sClientIp"] = kant::JsonOutput::writeJson(sClientIp);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(sClientIp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<kant::DockerRegistry> doctorRegistries;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.getByDefault("doctorRegistries", doctorRegistries, doctorRegistries);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(doctorRegistries, _jsonPtr->value["doctorRegistries"], false);
                    }
                    else
                    {
                        _is.read(doctorRegistries, 1, false);
                    }
                    kant::Int32 _ret = getDockerRegistry(doctorRegistries, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("doctorRegistries", doctorRegistries);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["doctorRegistries"] = kant::JsonOutput::writeJson(doctorRegistries);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(doctorRegistries, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::FrameworkKey fKey;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.getByDefault("fKey", fKey, fKey);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(fKey, _jsonPtr->value["fKey"], false);
                    }
                    else
                    {
                        _is.read(fKey, 1, false);
                    }
                    kant::Int32 _ret = getFrameworkKey(fKey, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("fKey", fKey);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["fKey"] = kant::JsonOutput::writeJson(fKey);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(fKey, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    std::string profileTemplate;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("nodeName", nodeName);
                        kantAttr.getByDefault("profileTemplate", profileTemplate, profileTemplate);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        kant::JsonInput::readJson(profileTemplate, _jsonPtr->value["profileTemplate"], false);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(profileTemplate, 2, false);
                    }
                    kant::Int32 _ret = getNodeTemplate(nodeName,profileTemplate, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("profileTemplate", profileTemplate);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["profileTemplate"] = kant::JsonOutput::writeJson(profileTemplate);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(profileTemplate, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("nodeName", nodeName);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                    }
                    vector<kant::ServerDescriptor> _ret = getServers(app,serverName,nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    kant::LoadInfo load;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("nodeName", nodeName);
                        kantAttr.get("load", load);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        kant::JsonInput::readJson(load, _jsonPtr->value["load"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(load, 2, true);
                    }
                    kant::Int32 _ret = keepAlive(nodeName,load, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 8:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    kant::NodeInfo ni;
                    kant::LoadInfo li;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("nodeName", nodeName);
                        kantAttr.get("ni", ni);
                        kantAttr.get("li", li);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        kant::JsonInput::readJson(ni, _jsonPtr->value["ni"], true);
                        kant::JsonInput::readJson(li, _jsonPtr->value["li"], true);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(ni, 2, true);
                        _is.read(li, 3, true);
                    }
                    kant::Int32 _ret = registerNode(nodeName,ni,li, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 9:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    std::string version;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("nodeName", nodeName);
                        kantAttr.get("version", version);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        kant::JsonInput::readJson(version, _jsonPtr->value["version"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(version, 4, true);
                    }
                    kant::Int32 _ret = reportVersion(app,serverName,nodeName,version, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 10:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::PatchResult result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("result", result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(result, _jsonPtr->value["result"], true);
                    }
                    else
                    {
                        _is.read(result, 1, true);
                    }
                    kant::Int32 _ret = updatePatchResult(result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 11:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    kant::ServerStateInfo state;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("nodeName", nodeName);
                        kantAttr.get("state", state);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(nodeName, _jsonPtr->value["nodeName"], true);
                        kant::JsonInput::readJson(state, _jsonPtr->value["state"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(state, 4, true);
                    }
                    kant::Int32 _ret = updateServer(app,serverName,nodeName,state, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 12:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<kant::ServerStateInfo> vState;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("vState", vState);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(vState, _jsonPtr->value["vState"], true);
                    }
                    else
                    {
                        _is.read(vState, 1, true);
                    }
                    kant::Int32 _ret = updateServerBatch(vState, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
