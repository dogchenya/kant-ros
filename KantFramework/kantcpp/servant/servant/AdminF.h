// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __ADMINF_H_
#define __ADMINF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{

    /* callback of async proxy for client */
    class AdminFPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~AdminFPrxCallback(){}
        virtual void callback_notify(const std::string& ret)
        { throw std::runtime_error("callback_notify() override incorrect."); }
        virtual void callback_notify_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_notify_exception() override incorrect."); }

        virtual void callback_shutdown()
        { throw std::runtime_error("callback_shutdown() override incorrect."); }
        virtual void callback_shutdown_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_shutdown_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __AdminF_all[]=
            {
                "notify",
                "shutdown"
            };
            pair<string*, string*> r = equal_range(__AdminF_all, __AdminF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __AdminF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_notify_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    std::string _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_notify(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_shutdown_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_shutdown();

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<AdminFPrxCallback> AdminFPrxCallbackPtr;

    //callback of promise async proxy for client
    class AdminFPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~AdminFPrxCallbackPromise(){}
    public:
        struct Promisenotify
        {
        public:
            std::string _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AdminFPrxCallbackPromise::Promisenotify > PromisenotifyPtr;

        AdminFPrxCallbackPromise(const kant::Promise< AdminFPrxCallbackPromise::PromisenotifyPtr > &promise)
        : _promise_notify(promise)
        {}
        
        virtual void callback_notify(const AdminFPrxCallbackPromise::PromisenotifyPtr &ptr)
        {
            _promise_notify.setValue(ptr);
        }
        virtual void callback_notify_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:notify_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_notify.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AdminFPrxCallbackPromise::PromisenotifyPtr > _promise_notify;

    public:
        struct Promiseshutdown
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< AdminFPrxCallbackPromise::Promiseshutdown > PromiseshutdownPtr;

        AdminFPrxCallbackPromise(const kant::Promise< AdminFPrxCallbackPromise::PromiseshutdownPtr > &promise)
        : _promise_shutdown(promise)
        {}
        
        virtual void callback_shutdown(const AdminFPrxCallbackPromise::PromiseshutdownPtr &ptr)
        {
            _promise_shutdown.setValue(ptr);
        }
        virtual void callback_shutdown_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:shutdown_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_shutdown.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< AdminFPrxCallbackPromise::PromiseshutdownPtr > _promise_shutdown;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __AdminF_all[]=
            {
                "notify",
                "shutdown"
            };

            pair<string*, string*> r = equal_range(__AdminF_all, __AdminF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __AdminF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_notify_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AdminFPrxCallbackPromise::PromisenotifyPtr ptr = std::make_shared<AdminFPrxCallbackPromise::Promisenotify>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_notify_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_notify_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_notify(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_shutdown_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    AdminFPrxCallbackPromise::PromiseshutdownPtr ptr = std::make_shared<AdminFPrxCallbackPromise::Promiseshutdown>();

                    ptr->_mRspContext = msg->response->context;

                    callback_shutdown(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<AdminFPrxCallbackPromise> AdminFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class AdminFCoroPrxCallback: public AdminFPrxCallback
    {
    public:
        virtual ~AdminFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __AdminF_all[]=
            {
                "notify",
                "shutdown"
            };

            pair<string*, string*> r = equal_range(__AdminF_all, __AdminF_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __AdminF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_notify_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        std::string _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_notify(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_notify_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_notify_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_shutdown_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    setResponseContext(msg->response->context);

                    callback_shutdown();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<AdminFCoroPrxCallback> AdminFCoroPrxCallbackPtr;

    /* proxy for client */
    class AdminFProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        std::string notify(const std::string & command,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(command, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"notify", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            std::string _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_notify(AdminFPrxCallbackPtr callback,const std::string &command,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(command, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"notify", _os, context, _mStatus, callback);
        }
        
        kant::Future< AdminFPrxCallbackPromise::PromisenotifyPtr > promise_async_notify(const std::string &command,const map<string, string>& context)
        {
            kant::Promise< AdminFPrxCallbackPromise::PromisenotifyPtr > promise;
            AdminFPrxCallbackPromisePtr callback = std::make_shared<AdminFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(command, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"notify", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_notify(AdminFCoroPrxCallbackPtr callback,const std::string &command,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(command, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"notify", _os, context, _mStatus, callback, true);
        }

        void shutdown(const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"shutdown", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

        }

        void async_shutdown(AdminFPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"shutdown", _os, context, _mStatus, callback);
        }
        
        kant::Future< AdminFPrxCallbackPromise::PromiseshutdownPtr > promise_async_shutdown(const map<string, string>& context)
        {
            kant::Promise< AdminFPrxCallbackPromise::PromiseshutdownPtr > promise;
            AdminFPrxCallbackPromisePtr callback = std::make_shared<AdminFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"shutdown", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_shutdown(AdminFCoroPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"shutdown", _os, context, _mStatus, callback, true);
        }

        AdminFProxy* kant_hash(int64_t key)
        {
            return (AdminFProxy*)ServantProxy::kant_hash(key);
        }

        AdminFProxy* kant_consistent_hash(int64_t key)
        {
            return (AdminFProxy*)ServantProxy::kant_consistent_hash(key);
        }

        AdminFProxy* kant_open_trace(bool traceParam = false)
        {
            return (AdminFProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        AdminFProxy* kant_set_timeout(int msecond)
        {
            return (AdminFProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "AdminFProxy"; }
    };
    typedef std::shared_ptr<AdminFProxy> AdminFPrx;

    /* servant for server */
    class AdminF : public kant::Servant
    {
    public:
        virtual ~AdminF(){}
        virtual std::string notify(const std::string & command,kant::KantCurrentPtr current) = 0;
        static void async_response_notify(kant::KantCurrentPtr current, const std::string &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual void shutdown(kant::KantCurrentPtr current) = 0;
        static void async_response_shutdown(kant::KantCurrentPtr current)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__AdminF_all[]=
            {
                "notify",
                "shutdown"
            };

            pair<string*, string*> r = equal_range(__kant__AdminF_all, __kant__AdminF_all+2, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__AdminF_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string command;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("command", command);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(command, _jsonPtr->value["command"], true);
                    }
                    else
                    {
                        _is.read(command, 1, true);
                    }
                    std::string _ret = notify(command, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                    }
                    else
                    {
                    }
                    shutdown(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
