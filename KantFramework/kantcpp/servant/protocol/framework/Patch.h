// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __PATCH_H_
#define __PATCH_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{
    struct FileInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.FileInfo";
        }
        static string MD5()
        {
            return "2c711de9dce412502e3a1e8355e8ee03";
        }
        FileInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            path = "";
            size = 0;
            canExec = true;
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(path, 0);
            _os.write(size, 1);
            _os.write(canExec, 2);
            if (md5 != "")
            {
                _os.write(md5, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(path, 0, true);
            _is.read(size, 1, true);
            _is.read(canExec, 2, true);
            _is.read(md5, 3, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["path"] = kant::JsonOutput::writeJson(path);
            p->value["size"] = kant::JsonOutput::writeJson(size);
            p->value["canExec"] = kant::JsonOutput::writeJson(canExec);
            p->value["md5"] = kant::JsonOutput::writeJson(md5);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(path,pObj->value["path"], true);
            kant::JsonInput::readJson(size,pObj->value["size"], true);
            kant::JsonInput::readJson(canExec,pObj->value["canExec"], true);
            kant::JsonInput::readJson(md5,pObj->value["md5"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(path,"path");
            _ds.display(size,"size");
            _ds.display(canExec,"canExec");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(path, true);
            _ds.displaySimple(size, true);
            _ds.displaySimple(canExec, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        std::string path;
        kant::Int32 size;
        kant::Bool canExec;
        std::string md5;
    };
    inline bool operator==(const FileInfo&l, const FileInfo&r)
    {
        return l.path == r.path && l.size == r.size && l.canExec == r.canExec && l.md5 == r.md5;
    }
    inline bool operator!=(const FileInfo&l, const FileInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const FileInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,FileInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct FileContent : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.FileContent";
        }
        static string MD5()
        {
            return "ca75ae16edc80b385723b73b173cf504";
        }
        FileContent()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            md5 = "";
            name = "";
            firstChunk = true;
            lastChunk = true;
            content.clear();
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(md5, 0);
            _os.write(name, 1);
            _os.write(firstChunk, 2);
            _os.write(lastChunk, 3);
            _os.write(content, 4);
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(md5, 0, true);
            _is.read(name, 1, true);
            _is.read(firstChunk, 2, true);
            _is.read(lastChunk, 3, true);
            _is.read(content, 4, true);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["md5"] = kant::JsonOutput::writeJson(md5);
            p->value["name"] = kant::JsonOutput::writeJson(name);
            p->value["firstChunk"] = kant::JsonOutput::writeJson(firstChunk);
            p->value["lastChunk"] = kant::JsonOutput::writeJson(lastChunk);
            p->value["content"] = kant::JsonOutput::writeJson(content);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(md5,pObj->value["md5"], true);
            kant::JsonInput::readJson(name,pObj->value["name"], true);
            kant::JsonInput::readJson(firstChunk,pObj->value["firstChunk"], true);
            kant::JsonInput::readJson(lastChunk,pObj->value["lastChunk"], true);
            kant::JsonInput::readJson(content,pObj->value["content"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(md5,"md5");
            _ds.display(name,"name");
            _ds.display(firstChunk,"firstChunk");
            _ds.display(lastChunk,"lastChunk");
            _ds.display(content,"content");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(firstChunk, true);
            _ds.displaySimple(lastChunk, true);
            _ds.displaySimple(content, false);
            return _os;
        }
    public:
        std::string md5;
        std::string name;
        kant::Bool firstChunk;
        kant::Bool lastChunk;
        vector<kant::Char> content;
    };
    inline bool operator==(const FileContent&l, const FileContent&r)
    {
        return l.md5 == r.md5 && l.name == r.name && l.firstChunk == r.firstChunk && l.lastChunk == r.lastChunk && l.content == r.content;
    }
    inline bool operator!=(const FileContent&l, const FileContent&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const FileContent&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,FileContent&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class PatchPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~PatchPrxCallback(){}
        virtual void callback_deletePatchFile(kant::Int32 ret)
        { throw std::runtime_error("callback_deletePatchFile() override incorrect."); }
        virtual void callback_deletePatchFile_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_deletePatchFile_exception() override incorrect."); }

        virtual void callback_download(kant::Int32 ret,  const vector<kant::Char>& vb)
        { throw std::runtime_error("callback_download() override incorrect."); }
        virtual void callback_download_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_download_exception() override incorrect."); }

        virtual void callback_listFileInfo(kant::Int32 ret,  const vector<kant::FileInfo>& vf)
        { throw std::runtime_error("callback_listFileInfo() override incorrect."); }
        virtual void callback_listFileInfo_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_listFileInfo_exception() override incorrect."); }

        virtual void callback_preparePatchFile(kant::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_preparePatchFile() override incorrect."); }
        virtual void callback_preparePatchFile_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_preparePatchFile_exception() override incorrect."); }

        virtual void callback_upload(kant::Int32 ret)
        { throw std::runtime_error("callback_upload() override incorrect."); }
        virtual void callback_upload_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_upload_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Patch_all[]=
            {
                "deletePatchFile",
                "download",
                "listFileInfo",
                "preparePatchFile",
                "upload"
            };
            pair<string*, string*> r = equal_range(__Patch_all, __Patch_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Patch_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deletePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_deletePatchFile(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_download_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<kant::Char> vb;
                    _is.read(vb, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_download(_ret, vb);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_listFileInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<kant::FileInfo> vf;
                    _is.read(vf, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_listFileInfo(_ret, vf);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_preparePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_preparePatchFile(_ret, result);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_upload_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_upload(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<PatchPrxCallback> PatchPrxCallbackPtr;

    //callback of promise async proxy for client
    class PatchPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~PatchPrxCallbackPromise(){}
    public:
        struct PromisedeletePatchFile
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< PatchPrxCallbackPromise::PromisedeletePatchFile > PromisedeletePatchFilePtr;

        PatchPrxCallbackPromise(const kant::Promise< PatchPrxCallbackPromise::PromisedeletePatchFilePtr > &promise)
        : _promise_deletePatchFile(promise)
        {}
        
        virtual void callback_deletePatchFile(const PatchPrxCallbackPromise::PromisedeletePatchFilePtr &ptr)
        {
            _promise_deletePatchFile.setValue(ptr);
        }
        virtual void callback_deletePatchFile_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:deletePatchFile_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_deletePatchFile.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< PatchPrxCallbackPromise::PromisedeletePatchFilePtr > _promise_deletePatchFile;

    public:
        struct Promisedownload
        {
        public:
            kant::Int32 _ret;
            vector<kant::Char> vb;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< PatchPrxCallbackPromise::Promisedownload > PromisedownloadPtr;

        PatchPrxCallbackPromise(const kant::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > &promise)
        : _promise_download(promise)
        {}
        
        virtual void callback_download(const PatchPrxCallbackPromise::PromisedownloadPtr &ptr)
        {
            _promise_download.setValue(ptr);
        }
        virtual void callback_download_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:download_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_download.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > _promise_download;

    public:
        struct PromiselistFileInfo
        {
        public:
            kant::Int32 _ret;
            vector<kant::FileInfo> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< PatchPrxCallbackPromise::PromiselistFileInfo > PromiselistFileInfoPtr;

        PatchPrxCallbackPromise(const kant::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > &promise)
        : _promise_listFileInfo(promise)
        {}
        
        virtual void callback_listFileInfo(const PatchPrxCallbackPromise::PromiselistFileInfoPtr &ptr)
        {
            _promise_listFileInfo.setValue(ptr);
        }
        virtual void callback_listFileInfo_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:listFileInfo_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_listFileInfo.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > _promise_listFileInfo;

    public:
        struct PromisepreparePatchFile
        {
        public:
            kant::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< PatchPrxCallbackPromise::PromisepreparePatchFile > PromisepreparePatchFilePtr;

        PatchPrxCallbackPromise(const kant::Promise< PatchPrxCallbackPromise::PromisepreparePatchFilePtr > &promise)
        : _promise_preparePatchFile(promise)
        {}
        
        virtual void callback_preparePatchFile(const PatchPrxCallbackPromise::PromisepreparePatchFilePtr &ptr)
        {
            _promise_preparePatchFile.setValue(ptr);
        }
        virtual void callback_preparePatchFile_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:preparePatchFile_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_preparePatchFile.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< PatchPrxCallbackPromise::PromisepreparePatchFilePtr > _promise_preparePatchFile;

    public:
        struct Promiseupload
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< PatchPrxCallbackPromise::Promiseupload > PromiseuploadPtr;

        PatchPrxCallbackPromise(const kant::Promise< PatchPrxCallbackPromise::PromiseuploadPtr > &promise)
        : _promise_upload(promise)
        {}
        
        virtual void callback_upload(const PatchPrxCallbackPromise::PromiseuploadPtr &ptr)
        {
            _promise_upload.setValue(ptr);
        }
        virtual void callback_upload_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:upload_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_upload.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< PatchPrxCallbackPromise::PromiseuploadPtr > _promise_upload;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Patch_all[]=
            {
                "deletePatchFile",
                "download",
                "listFileInfo",
                "preparePatchFile",
                "upload"
            };

            pair<string*, string*> r = equal_range(__Patch_all, __Patch_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Patch_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deletePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    PatchPrxCallbackPromise::PromisedeletePatchFilePtr ptr = std::make_shared<PatchPrxCallbackPromise::PromisedeletePatchFile>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deletePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deletePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_deletePatchFile(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_download_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    PatchPrxCallbackPromise::PromisedownloadPtr ptr = std::make_shared<PatchPrxCallbackPromise::Promisedownload>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vb, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_download_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_download_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_download(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_listFileInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    PatchPrxCallbackPromise::PromiselistFileInfoPtr ptr = std::make_shared<PatchPrxCallbackPromise::PromiselistFileInfo>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_listFileInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_listFileInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_listFileInfo(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_preparePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    PatchPrxCallbackPromise::PromisepreparePatchFilePtr ptr = std::make_shared<PatchPrxCallbackPromise::PromisepreparePatchFile>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_preparePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_preparePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_preparePatchFile(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_upload_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    PatchPrxCallbackPromise::PromiseuploadPtr ptr = std::make_shared<PatchPrxCallbackPromise::Promiseupload>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_upload_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_upload_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_upload(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<PatchPrxCallbackPromise> PatchPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class PatchCoroPrxCallback: public PatchPrxCallback
    {
    public:
        virtual ~PatchCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Patch_all[]=
            {
                "deletePatchFile",
                "download",
                "listFileInfo",
                "preparePatchFile",
                "upload"
            };

            pair<string*, string*> r = equal_range(__Patch_all, __Patch_all+5, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Patch_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_deletePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_deletePatchFile(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deletePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deletePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_download_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<kant::Char> vb;
                        _is.read(vb, 3, true);
                        setResponseContext(msg->response->context);

                        callback_download(_ret, vb);

                    }
                    catch(std::exception &ex)
                    {
                        callback_download_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_download_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_listFileInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<kant::FileInfo> vf;
                        _is.read(vf, 2, true);
                        setResponseContext(msg->response->context);

                        callback_listFileInfo(_ret, vf);

                    }
                    catch(std::exception &ex)
                    {
                        callback_listFileInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_listFileInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_preparePatchFile_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 4, true);
                        setResponseContext(msg->response->context);

                        callback_preparePatchFile(_ret, result);

                    }
                    catch(std::exception &ex)
                    {
                        callback_preparePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_preparePatchFile_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_upload_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_upload(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_upload_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_upload_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<PatchCoroPrxCallback> PatchCoroPrxCallbackPtr;

    /* proxy for client */
    class PatchProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        PatchProxy(Communicator* pCommunicator, const string& name, const string& setName)
                : ServantProxy(pCommunicator, name, setName) {}

        kant::Int32 deletePatchFile(const std::string & app,const std::string & serverName,const std::string & patchFile,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"deletePatchFile", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_deletePatchFile(PatchPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deletePatchFile", _os, context, _mStatus, callback);
        }
        
        kant::Future< PatchPrxCallbackPromise::PromisedeletePatchFilePtr > promise_async_deletePatchFile(const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context)
        {
            kant::Promise< PatchPrxCallbackPromise::PromisedeletePatchFilePtr > promise;
            PatchPrxCallbackPromisePtr callback = std::make_shared<PatchPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deletePatchFile", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_deletePatchFile(PatchCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"deletePatchFile", _os, context, _mStatus, callback, true);
        }

        kant::Int32 download(const std::string & file,kant::Int32 pos,vector<kant::Char> &vb,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(file, 1);
            _os.write(pos, 2);
            _os.write(vb, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"download", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vb, 3, true);
            return _ret;
        }

        void async_download(PatchPrxCallbackPtr callback,const std::string &file,kant::Int32 pos,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(file, 1);
            _os.write(pos, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"download", _os, context, _mStatus, callback);
        }
        
        kant::Future< PatchPrxCallbackPromise::PromisedownloadPtr > promise_async_download(const std::string &file,kant::Int32 pos,const map<string, string>& context)
        {
            kant::Promise< PatchPrxCallbackPromise::PromisedownloadPtr > promise;
            PatchPrxCallbackPromisePtr callback = std::make_shared<PatchPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(file, 1);
            _os.write(pos, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"download", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_download(PatchCoroPrxCallbackPtr callback,const std::string &file,kant::Int32 pos,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(file, 1);
            _os.write(pos, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"download", _os, context, _mStatus, callback, true);
        }

        kant::Int32 listFileInfo(const std::string & path,vector<kant::FileInfo> &vf,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(path, 1);
            _os.write(vf, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"listFileInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 2, true);
            return _ret;
        }

        void async_listFileInfo(PatchPrxCallbackPtr callback,const std::string &path,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(path, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"listFileInfo", _os, context, _mStatus, callback);
        }
        
        kant::Future< PatchPrxCallbackPromise::PromiselistFileInfoPtr > promise_async_listFileInfo(const std::string &path,const map<string, string>& context)
        {
            kant::Promise< PatchPrxCallbackPromise::PromiselistFileInfoPtr > promise;
            PatchPrxCallbackPromisePtr callback = std::make_shared<PatchPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(path, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"listFileInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_listFileInfo(PatchCoroPrxCallbackPtr callback,const std::string &path,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(path, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"listFileInfo", _os, context, _mStatus, callback, true);
        }

        kant::Int32 preparePatchFile(const std::string & app,const std::string & serverName,const std::string & patchFile,std::string &result,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            _os.write(result, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"preparePatchFile", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 4, true);
            return _ret;
        }

        void async_preparePatchFile(PatchPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"preparePatchFile", _os, context, _mStatus, callback);
        }
        
        kant::Future< PatchPrxCallbackPromise::PromisepreparePatchFilePtr > promise_async_preparePatchFile(const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context)
        {
            kant::Promise< PatchPrxCallbackPromise::PromisepreparePatchFilePtr > promise;
            PatchPrxCallbackPromisePtr callback = std::make_shared<PatchPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"preparePatchFile", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_preparePatchFile(PatchCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &patchFile,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(patchFile, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"preparePatchFile", _os, context, _mStatus, callback, true);
        }

        kant::Int32 upload(const std::string & app,const std::string & serverName,const kant::FileContent & content,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(content, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"upload", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_upload(PatchPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const kant::FileContent &content,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(content, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"upload", _os, context, _mStatus, callback);
        }
        
        kant::Future< PatchPrxCallbackPromise::PromiseuploadPtr > promise_async_upload(const std::string &app,const std::string &serverName,const kant::FileContent &content,const map<string, string>& context)
        {
            kant::Promise< PatchPrxCallbackPromise::PromiseuploadPtr > promise;
            PatchPrxCallbackPromisePtr callback = std::make_shared<PatchPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(content, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"upload", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_upload(PatchCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const kant::FileContent &content,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(content, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"upload", _os, context, _mStatus, callback, true);
        }

        PatchProxy* kant_hash(int64_t key)
        {
            return (PatchProxy*)ServantProxy::kant_hash(key);
        }

        PatchProxy* kant_consistent_hash(int64_t key)
        {
            return (PatchProxy*)ServantProxy::kant_consistent_hash(key);
        }

        PatchProxy* kant_open_trace(bool traceParam = false)
        {
            return (PatchProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        PatchProxy* kant_set_timeout(int msecond)
        {
            return (PatchProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "PatchProxy"; }
    };
    typedef std::shared_ptr<PatchProxy> PatchPrx;

    /* servant for server */
    class Patch : public kant::Servant
    {
    public:
        virtual ~Patch(){}
        virtual kant::Int32 deletePatchFile(const std::string & app,const std::string & serverName,const std::string & patchFile,kant::KantCurrentPtr current) = 0;
        static void async_response_deletePatchFile(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 download(const std::string & file,kant::Int32 pos,vector<kant::Char> &vb,kant::KantCurrentPtr current) = 0;
        static void async_response_download(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<kant::Char> &vb)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("vb", vb);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["vb"] = kant::JsonOutput::writeJson(vb);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vb, 3);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 listFileInfo(const std::string & path,vector<kant::FileInfo> &vf,kant::KantCurrentPtr current) = 0;
        static void async_response_listFileInfo(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<kant::FileInfo> &vf)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("vf", vf);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 preparePatchFile(const std::string & app,const std::string & serverName,const std::string & patchFile,std::string &result,kant::KantCurrentPtr current) = 0;
        static void async_response_preparePatchFile(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("result", result);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["result"] = kant::JsonOutput::writeJson(result);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 upload(const std::string & app,const std::string & serverName,const kant::FileContent & content,kant::KantCurrentPtr current) = 0;
        static void async_response_upload(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__Patch_all[]=
            {
                "deletePatchFile",
                "download",
                "listFileInfo",
                "preparePatchFile",
                "upload"
            };

            pair<string*, string*> r = equal_range(__kant__Patch_all, __kant__Patch_all+5, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__Patch_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string patchFile;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("patchFile", patchFile);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(patchFile, _jsonPtr->value["patchFile"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(patchFile, 3, true);
                    }
                    kant::Int32 _ret = deletePatchFile(app,serverName,patchFile, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string file;
                    kant::Int32 pos;
                    vector<kant::Char> vb;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("file", file);
                        kantAttr.get("pos", pos);
                        kantAttr.getByDefault("vb", vb, vb);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(file, _jsonPtr->value["file"], true);
                        kant::JsonInput::readJson(pos, _jsonPtr->value["pos"], true);
                        kant::JsonInput::readJson(vb, _jsonPtr->value["vb"], false);
                    }
                    else
                    {
                        _is.read(file, 1, true);
                        _is.read(pos, 2, true);
                        _is.read(vb, 3, false);
                    }
                    kant::Int32 _ret = download(file,pos,vb, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("vb", vb);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["vb"] = kant::JsonOutput::writeJson(vb);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vb, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string path;
                    vector<kant::FileInfo> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("path", path);
                        kantAttr.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(path, _jsonPtr->value["path"], true);
                        kant::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(path, 1, true);
                        _is.read(vf, 2, false);
                    }
                    kant::Int32 _ret = listFileInfo(path,vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("vf", vf);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string patchFile;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("patchFile", patchFile);
                        kantAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(patchFile, _jsonPtr->value["patchFile"], true);
                        kant::JsonInput::readJson(result, _jsonPtr->value["result"], false);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(patchFile, 3, true);
                        _is.read(result, 4, false);
                    }
                    kant::Int32 _ret = preparePatchFile(app,serverName,patchFile,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("result", result);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["result"] = kant::JsonOutput::writeJson(result);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    kant::FileContent content;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("content", content);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(content, _jsonPtr->value["content"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(content, 3, true);
                    }
                    kant::Int32 _ret = upload(app,serverName,content, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
