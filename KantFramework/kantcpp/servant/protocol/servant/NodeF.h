// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __NODEF_H_
#define __NODEF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{
    struct ServerInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.ServerInfo";
        }
        static string MD5()
        {
            return "3d89ee30d668ec9632f606c312cabb8d";
        }
        ServerInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            application = "";
            serverName = "";
            pid = 0;
            adapter = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(application, 0);
            _os.write(serverName, 1);
            _os.write(pid, 2);
            if (adapter != "")
            {
                _os.write(adapter, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(application, 0, true);
            _is.read(serverName, 1, true);
            _is.read(pid, 2, true);
            _is.read(adapter, 3, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["application"] = kant::JsonOutput::writeJson(application);
            p->value["serverName"] = kant::JsonOutput::writeJson(serverName);
            p->value["pid"] = kant::JsonOutput::writeJson(pid);
            p->value["adapter"] = kant::JsonOutput::writeJson(adapter);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(application,pObj->value["application"], true);
            kant::JsonInput::readJson(serverName,pObj->value["serverName"], true);
            kant::JsonInput::readJson(pid,pObj->value["pid"], true);
            kant::JsonInput::readJson(adapter,pObj->value["adapter"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(application,"application");
            _ds.display(serverName,"serverName");
            _ds.display(pid,"pid");
            _ds.display(adapter,"adapter");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(application, true);
            _ds.displaySimple(serverName, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(adapter, false);
            return _os;
        }
    public:
        std::string application;
        std::string serverName;
        kant::Int32 pid;
        std::string adapter;
    };
    inline bool operator==(const ServerInfo&l, const ServerInfo&r)
    {
        return l.application == r.application && l.serverName == r.serverName && l.pid == r.pid && l.adapter == r.adapter;
    }
    inline bool operator!=(const ServerInfo&l, const ServerInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ServerInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ServerInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class ServerFPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallback(){}
        virtual void callback_getLatestKeepAliveTime(kant::UInt32 ret)
        { throw std::runtime_error("callback_getLatestKeepAliveTime() override incorrect."); }
        virtual void callback_getLatestKeepAliveTime_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_getLatestKeepAliveTime_exception() override incorrect."); }

        virtual void callback_keepActiving(kant::Int32 ret)
        { throw std::runtime_error("callback_keepActiving() override incorrect."); }
        virtual void callback_keepActiving_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_keepActiving_exception() override incorrect."); }

        virtual void callback_keepAlive(kant::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_reportVersion(kant::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "getLatestKeepAliveTime",
                "keepActiving",
                "keepAlive",
                "reportVersion"
            };
            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getLatestKeepAliveTime_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::UInt32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getLatestKeepAliveTime(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepActiving_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_keepActiving(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_reportVersion(_ret);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<ServerFPrxCallback> ServerFPrxCallbackPtr;

    //callback of promise async proxy for client
    class ServerFPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~ServerFPrxCallbackPromise(){}
    public:
        struct PromisegetLatestKeepAliveTime
        {
        public:
            kant::UInt32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTime > PromisegetLatestKeepAliveTimePtr;

        ServerFPrxCallbackPromise(const kant::Promise< ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr > &promise)
        : _promise_getLatestKeepAliveTime(promise)
        {}
        
        virtual void callback_getLatestKeepAliveTime(const ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr &ptr)
        {
            _promise_getLatestKeepAliveTime.setValue(ptr);
        }
        virtual void callback_getLatestKeepAliveTime_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:getLatestKeepAliveTime_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_getLatestKeepAliveTime.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr > _promise_getLatestKeepAliveTime;

    public:
        struct PromisekeepActiving
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ServerFPrxCallbackPromise::PromisekeepActiving > PromisekeepActivingPtr;

        ServerFPrxCallbackPromise(const kant::Promise< ServerFPrxCallbackPromise::PromisekeepActivingPtr > &promise)
        : _promise_keepActiving(promise)
        {}
        
        virtual void callback_keepActiving(const ServerFPrxCallbackPromise::PromisekeepActivingPtr &ptr)
        {
            _promise_keepActiving.setValue(ptr);
        }
        virtual void callback_keepActiving_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:keepActiving_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_keepActiving.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ServerFPrxCallbackPromise::PromisekeepActivingPtr > _promise_keepActiving;

    public:
        struct PromisekeepAlive
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ServerFPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        ServerFPrxCallbackPromise(const kant::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const ServerFPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_keepAlive.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromisereportVersion
        {
        public:
            kant::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ServerFPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        ServerFPrxCallbackPromise(const kant::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const ServerFPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_reportVersion.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "getLatestKeepAliveTime",
                "keepActiving",
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getLatestKeepAliveTime_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr ptr = std::make_shared<ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTime>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getLatestKeepAliveTime_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getLatestKeepAliveTime_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getLatestKeepAliveTime(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepActiving_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ServerFPrxCallbackPromise::PromisekeepActivingPtr ptr = std::make_shared<ServerFPrxCallbackPromise::PromisekeepActiving>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepActiving_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepActiving_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_keepActiving(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ServerFPrxCallbackPromise::PromisekeepAlivePtr ptr = std::make_shared<ServerFPrxCallbackPromise::PromisekeepAlive>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_keepAlive(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ServerFPrxCallbackPromise::PromisereportVersionPtr ptr = std::make_shared<ServerFPrxCallbackPromise::PromisereportVersion>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_reportVersion(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<ServerFPrxCallbackPromise> ServerFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ServerFCoroPrxCallback: public ServerFPrxCallback
    {
    public:
        virtual ~ServerFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __ServerF_all[]=
            {
                "getLatestKeepAliveTime",
                "keepActiving",
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__ServerF_all, __ServerF_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __ServerF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_getLatestKeepAliveTime_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::UInt32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_getLatestKeepAliveTime(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getLatestKeepAliveTime_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getLatestKeepAliveTime_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepActiving_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_keepActiving(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepActiving_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepActiving_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_reportVersion(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<ServerFCoroPrxCallback> ServerFCoroPrxCallbackPtr;

    /* proxy for client */
    class ServerFProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        ServerFProxy(Communicator* pCommunicator, const string& name, const string& setName)
                : ServantProxy(pCommunicator, name, setName) {}

        kant::UInt32 getLatestKeepAliveTime(const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"getLatestKeepAliveTime", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::UInt32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getLatestKeepAliveTime(ServerFPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getLatestKeepAliveTime", _os, context, _mStatus, callback);
        }
        
        kant::Future< ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr > promise_async_getLatestKeepAliveTime(const map<string, string>& context)
        {
            kant::Promise< ServerFPrxCallbackPromise::PromisegetLatestKeepAliveTimePtr > promise;
            ServerFPrxCallbackPromisePtr callback = std::make_shared<ServerFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getLatestKeepAliveTime", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getLatestKeepAliveTime(ServerFCoroPrxCallbackPtr callback,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"getLatestKeepAliveTime", _os, context, _mStatus, callback, true);
        }

        kant::Int32 keepActiving(const kant::ServerInfo & serverInfo,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"keepActiving", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepActiving(ServerFPrxCallbackPtr callback,const kant::ServerInfo &serverInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepActiving", _os, context, _mStatus, callback);
        }
        
        kant::Future< ServerFPrxCallbackPromise::PromisekeepActivingPtr > promise_async_keepActiving(const kant::ServerInfo &serverInfo,const map<string, string>& context)
        {
            kant::Promise< ServerFPrxCallbackPromise::PromisekeepActivingPtr > promise;
            ServerFPrxCallbackPromisePtr callback = std::make_shared<ServerFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepActiving", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepActiving(ServerFCoroPrxCallbackPtr callback,const kant::ServerInfo &serverInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepActiving", _os, context, _mStatus, callback, true);
        }

        kant::Int32 keepAlive(const kant::ServerInfo & serverInfo,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(ServerFPrxCallbackPtr callback,const kant::ServerInfo &serverInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback);
        }
        
        kant::Future< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const kant::ServerInfo &serverInfo,const map<string, string>& context)
        {
            kant::Promise< ServerFPrxCallbackPromise::PromisekeepAlivePtr > promise;
            ServerFPrxCallbackPromisePtr callback = std::make_shared<ServerFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(ServerFCoroPrxCallbackPtr callback,const kant::ServerInfo &serverInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(serverInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"keepAlive", _os, context, _mStatus, callback, true);
        }

        kant::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportVersion(ServerFPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback);
        }
        
        kant::Future< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context)
        {
            kant::Promise< ServerFPrxCallbackPromise::PromisereportVersionPtr > promise;
            ServerFPrxCallbackPromisePtr callback = std::make_shared<ServerFPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportVersion(ServerFCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &version,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(version, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"reportVersion", _os, context, _mStatus, callback, true);
        }

        ServerFProxy* kant_hash(int64_t key)
        {
            return (ServerFProxy*)ServantProxy::kant_hash(key);
        }

        ServerFProxy* kant_consistent_hash(int64_t key)
        {
            return (ServerFProxy*)ServantProxy::kant_consistent_hash(key);
        }

        ServerFProxy* kant_open_trace(bool traceParam = false)
        {
            return (ServerFProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        ServerFProxy* kant_set_timeout(int msecond)
        {
            return (ServerFProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "ServerFProxy"; }
    };
    typedef std::shared_ptr<ServerFProxy> ServerFPrx;

    /* servant for server */
    class ServerF : public kant::Servant
    {
    public:
        virtual ~ServerF(){}
        virtual kant::UInt32 getLatestKeepAliveTime(kant::KantCurrentPtr current) = 0;
        static void async_response_getLatestKeepAliveTime(kant::KantCurrentPtr current, kant::UInt32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 keepActiving(const kant::ServerInfo & serverInfo,kant::KantCurrentPtr current) = 0;
        static void async_response_keepActiving(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 keepAlive(const kant::ServerInfo & serverInfo,kant::KantCurrentPtr current) = 0;
        static void async_response_keepAlive(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & version,kant::KantCurrentPtr current) = 0;
        static void async_response_reportVersion(kant::KantCurrentPtr current, kant::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__ServerF_all[]=
            {
                "getLatestKeepAliveTime",
                "keepActiving",
                "keepAlive",
                "reportVersion"
            };

            pair<string*, string*> r = equal_range(__kant__ServerF_all, __kant__ServerF_all+4, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__ServerF_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                    }
                    else
                    {
                    }
                    kant::UInt32 _ret = getLatestKeepAliveTime(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ServerInfo serverInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("serverInfo", serverInfo);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(serverInfo, _jsonPtr->value["serverInfo"], true);
                    }
                    else
                    {
                        _is.read(serverInfo, 1, true);
                    }
                    kant::Int32 _ret = keepActiving(serverInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ServerInfo serverInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("serverInfo", serverInfo);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(serverInfo, _jsonPtr->value["serverInfo"], true);
                    }
                    else
                    {
                        _is.read(serverInfo, 1, true);
                    }
                    kant::Int32 _ret = keepAlive(serverInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string version;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("serverName", serverName);
                        kantAttr.get("version", version);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(serverName, _jsonPtr->value["serverName"], true);
                        kant::JsonInput::readJson(version, _jsonPtr->value["version"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(version, 3, true);
                    }
                    kant::Int32 _ret = reportVersion(app,serverName,version, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
