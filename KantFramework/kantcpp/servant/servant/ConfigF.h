// **********************************************************************
// This file was generated by a KANT parser!
// KANT version KANT_VERSION.
// **********************************************************************

#ifndef __CONFIGF_H_
#define __CONFIGF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Kant.h"
#include "tup/KantJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace kant
{
    struct ConfigInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.ConfigInfo";
        }
        static string MD5()
        {
            return "03a932f00a213ebcf51abd7f1e5523ab";
        }
        ConfigInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            filename = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(filename, 2);
            _os.write(bAppOnly, 3);
            if (host != "")
            {
                _os.write(host, 4);
            }
            if (setdivision != "")
            {
                _os.write(setdivision, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(filename, 2, true);
            _is.read(bAppOnly, 3, true);
            _is.read(host, 4, false);
            _is.read(setdivision, 5, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["appname"] = kant::JsonOutput::writeJson(appname);
            p->value["servername"] = kant::JsonOutput::writeJson(servername);
            p->value["filename"] = kant::JsonOutput::writeJson(filename);
            p->value["bAppOnly"] = kant::JsonOutput::writeJson(bAppOnly);
            p->value["host"] = kant::JsonOutput::writeJson(host);
            p->value["setdivision"] = kant::JsonOutput::writeJson(setdivision);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(appname,pObj->value["appname"], true);
            kant::JsonInput::readJson(servername,pObj->value["servername"], true);
            kant::JsonInput::readJson(filename,pObj->value["filename"], true);
            kant::JsonInput::readJson(bAppOnly,pObj->value["bAppOnly"], true);
            kant::JsonInput::readJson(host,pObj->value["host"], false);
            kant::JsonInput::readJson(setdivision,pObj->value["setdivision"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(filename,"filename");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(filename, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string filename;
        kant::Bool bAppOnly;
        std::string host;
        std::string setdivision;
    };
    inline bool operator==(const ConfigInfo&l, const ConfigInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.filename == r.filename && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision;
    }
    inline bool operator!=(const ConfigInfo&l, const ConfigInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const ConfigInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,ConfigInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GetConfigListInfo : public kant::KantStructBase
    {
    public:
        static string className()
        {
            return "kant.GetConfigListInfo";
        }
        static string MD5()
        {
            return "a7205261cfaa7cf07508a1d8040c04e3";
        }
        GetConfigListInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            bAppOnly = false;
            host = "";
            setdivision = "";
            containername = "";
        }
        template<typename WriterT>
        void writeTo(kant::KantOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            if (servername != "")
            {
                _os.write(servername, 1);
            }
            if (bAppOnly != false)
            {
                _os.write(bAppOnly, 2);
            }
            if (host != "")
            {
                _os.write(host, 3);
            }
            if (setdivision != "")
            {
                _os.write(setdivision, 4);
            }
            if (containername != "")
            {
                _os.write(containername, 5);
            }
        }
        template<typename ReaderT>
        void readFrom(kant::KantInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, false);
            _is.read(bAppOnly, 2, false);
            _is.read(host, 3, false);
            _is.read(setdivision, 4, false);
            _is.read(containername, 5, false);
        }
        kant::JsonValueObjPtr writeToJson() const
        {
            kant::JsonValueObjPtr p = std::make_shared<kant::JsonValueObj>();
            p->value["appname"] = kant::JsonOutput::writeJson(appname);
            p->value["servername"] = kant::JsonOutput::writeJson(servername);
            p->value["bAppOnly"] = kant::JsonOutput::writeJson(bAppOnly);
            p->value["host"] = kant::JsonOutput::writeJson(host);
            p->value["setdivision"] = kant::JsonOutput::writeJson(setdivision);
            p->value["containername"] = kant::JsonOutput::writeJson(containername);
            return p;
        }
        string writeToJsonString() const
        {
            return kant::KT_Json::writeValue(writeToJson());
        }
        void readFromJson(const kant::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != kant::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw kant::KT_Json_Exception(s);
            }
            kant::JsonValueObjPtr pObj=std::dynamic_pointer_cast<kant::JsonValueObj>(p);
            kant::JsonInput::readJson(appname,pObj->value["appname"], true);
            kant::JsonInput::readJson(servername,pObj->value["servername"], false);
            kant::JsonInput::readJson(bAppOnly,pObj->value["bAppOnly"], false);
            kant::JsonInput::readJson(host,pObj->value["host"], false);
            kant::JsonInput::readJson(setdivision,pObj->value["setdivision"], false);
            kant::JsonInput::readJson(containername,pObj->value["containername"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(kant::KT_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(bAppOnly,"bAppOnly");
            _ds.display(host,"host");
            _ds.display(setdivision,"setdivision");
            _ds.display(containername,"containername");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            kant::KantDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(bAppOnly, true);
            _ds.displaySimple(host, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(containername, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        kant::Bool bAppOnly;
        std::string host;
        std::string setdivision;
        std::string containername;
    };
    inline bool operator==(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.bAppOnly == r.bAppOnly && l.host == r.host && l.setdivision == r.setdivision && l.containername == r.containername;
    }
    inline bool operator!=(const GetConfigListInfo&l, const GetConfigListInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetConfigListInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetConfigListInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class ConfigPrxCallback: public kant::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallback(){}
        virtual void callback_ListAllConfigByInfo(kant::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListAllConfigByInfo() override incorrect."); }
        virtual void callback_ListAllConfigByInfo_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_ListAllConfigByInfo_exception() override incorrect."); }

        virtual void callback_ListConfig(kant::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfig() override incorrect."); }
        virtual void callback_ListConfig_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_ListConfig_exception() override incorrect."); }

        virtual void callback_ListConfigByInfo(kant::Int32 ret,  const vector<std::string>& vf)
        { throw std::runtime_error("callback_ListConfigByInfo() override incorrect."); }
        virtual void callback_ListConfigByInfo_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_ListConfigByInfo_exception() override incorrect."); }

        virtual void callback_checkConfig(kant::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfig() override incorrect."); }
        virtual void callback_checkConfig_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_checkConfig_exception() override incorrect."); }

        virtual void callback_checkConfigByInfo(kant::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_checkConfigByInfo() override incorrect."); }
        virtual void callback_checkConfigByInfo_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_checkConfigByInfo_exception() override incorrect."); }

        virtual void callback_loadConfig(kant::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfig() override incorrect."); }
        virtual void callback_loadConfig_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_loadConfig_exception() override incorrect."); }

        virtual void callback_loadConfigByHost(kant::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByHost() override incorrect."); }
        virtual void callback_loadConfigByHost_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByHost_exception() override incorrect."); }

        virtual void callback_loadConfigByInfo(kant::Int32 ret,  const std::string& config)
        { throw std::runtime_error("callback_loadConfigByInfo() override incorrect."); }
        virtual void callback_loadConfigByInfo_exception(kant::Int32 ret)
        { throw std::runtime_error("callback_loadConfigByInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw KT_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };
            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_ListAllConfigByInfo(_ret, vf);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_ListConfig(_ret, vf);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<std::string> vf;
                    _is.read(vf, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_ListConfigByInfo(_ret, vf);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_checkConfig(_ret, result);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_checkConfigByInfo(_ret, result);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_loadConfig(_ret, config);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_loadConfigByHost(_ret, config);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    kant::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string config;
                    _is.read(config, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_loadConfigByInfo(_ret, config);

                    pCbtd->delResponseContext();

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<ConfigPrxCallback> ConfigPrxCallbackPtr;

    //callback of promise async proxy for client
    class ConfigPrxCallbackPromise: public kant::ServantProxyCallback
    {
    public:
        virtual ~ConfigPrxCallbackPromise(){}
    public:
        struct PromiseListAllConfigByInfo
        {
        public:
            kant::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseListAllConfigByInfo > PromiseListAllConfigByInfoPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > &promise)
        : _promise_ListAllConfigByInfo(promise)
        {}
        
        virtual void callback_ListAllConfigByInfo(const ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr &ptr)
        {
            _promise_ListAllConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListAllConfigByInfo_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:ListAllConfigByInfo_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_ListAllConfigByInfo.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > _promise_ListAllConfigByInfo;

    public:
        struct PromiseListConfig
        {
        public:
            kant::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseListConfig > PromiseListConfigPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > &promise)
        : _promise_ListConfig(promise)
        {}
        
        virtual void callback_ListConfig(const ConfigPrxCallbackPromise::PromiseListConfigPtr &ptr)
        {
            _promise_ListConfig.setValue(ptr);
        }
        virtual void callback_ListConfig_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfig_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_ListConfig.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > _promise_ListConfig;

    public:
        struct PromiseListConfigByInfo
        {
        public:
            kant::Int32 _ret;
            vector<std::string> vf;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseListConfigByInfo > PromiseListConfigByInfoPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > &promise)
        : _promise_ListConfigByInfo(promise)
        {}
        
        virtual void callback_ListConfigByInfo(const ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr &ptr)
        {
            _promise_ListConfigByInfo.setValue(ptr);
        }
        virtual void callback_ListConfigByInfo_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:ListConfigByInfo_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_ListConfigByInfo.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > _promise_ListConfigByInfo;

    public:
        struct PromisecheckConfig
        {
        public:
            kant::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromisecheckConfig > PromisecheckConfigPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > &promise)
        : _promise_checkConfig(promise)
        {}
        
        virtual void callback_checkConfig(const ConfigPrxCallbackPromise::PromisecheckConfigPtr &ptr)
        {
            _promise_checkConfig.setValue(ptr);
        }
        virtual void callback_checkConfig_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfig_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_checkConfig.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > _promise_checkConfig;

    public:
        struct PromisecheckConfigByInfo
        {
        public:
            kant::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromisecheckConfigByInfo > PromisecheckConfigByInfoPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > &promise)
        : _promise_checkConfigByInfo(promise)
        {}
        
        virtual void callback_checkConfigByInfo(const ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr &ptr)
        {
            _promise_checkConfigByInfo.setValue(ptr);
        }
        virtual void callback_checkConfigByInfo_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:checkConfigByInfo_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_checkConfigByInfo.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > _promise_checkConfigByInfo;

    public:
        struct PromiseloadConfig
        {
        public:
            kant::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseloadConfig > PromiseloadConfigPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > &promise)
        : _promise_loadConfig(promise)
        {}
        
        virtual void callback_loadConfig(const ConfigPrxCallbackPromise::PromiseloadConfigPtr &ptr)
        {
            _promise_loadConfig.setValue(ptr);
        }
        virtual void callback_loadConfig_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfig_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_loadConfig.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > _promise_loadConfig;

    public:
        struct PromiseloadConfigByHost
        {
        public:
            kant::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseloadConfigByHost > PromiseloadConfigByHostPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > &promise)
        : _promise_loadConfigByHost(promise)
        {}
        
        virtual void callback_loadConfigByHost(const ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr &ptr)
        {
            _promise_loadConfigByHost.setValue(ptr);
        }
        virtual void callback_loadConfigByHost_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByHost_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_loadConfigByHost.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > _promise_loadConfigByHost;

    public:
        struct PromiseloadConfigByInfo
        {
        public:
            kant::Int32 _ret;
            std::string config;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef std::shared_ptr< ConfigPrxCallbackPromise::PromiseloadConfigByInfo > PromiseloadConfigByInfoPtr;

        ConfigPrxCallbackPromise(const kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > &promise)
        : _promise_loadConfigByInfo(promise)
        {}
        
        virtual void callback_loadConfigByInfo(const ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr &ptr)
        {
            _promise_loadConfigByInfo.setValue(ptr);
        }
        virtual void callback_loadConfigByInfo_exception(kant::Int32 ret)
        {
            std::string str("");
            str += "Function:loadConfigByInfo_exception|Ret:";
            str += KT_Common::tostr(ret);
            _promise_loadConfigByInfo.setException(kant::copyException(str, ret));
        }

    protected:
        kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > _promise_loadConfigByInfo;

    public:
        virtual int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseListAllConfigByInfo>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListAllConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListAllConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_ListAllConfigByInfo(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListConfigPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseListConfig>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_ListConfig(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseListConfigByInfo>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->vf, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_ListConfigByInfo(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromisecheckConfigPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromisecheckConfig>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_checkConfig(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromisecheckConfigByInfo>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_checkConfigByInfo(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseloadConfig>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_loadConfig(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseloadConfigByHost>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByHost_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByHost_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_loadConfigByHost(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr ptr = std::make_shared<ConfigPrxCallbackPromise::PromiseloadConfigByInfo>();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->config, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_loadConfigByInfo(ptr);

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    };
    typedef std::shared_ptr<ConfigPrxCallbackPromise> ConfigPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class ConfigCoroPrxCallback: public ConfigPrxCallback
    {
    public:
        virtual ~ConfigCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(kant::ReqMessagePtr msg)
        {
            static ::std::string __Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__Config_all, __Config_all+8, string(msg->request.sFuncName));
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __Config_all)
            {
                case 0:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListAllConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 2, true);
                        setResponseContext(msg->response->context);

                        callback_ListAllConfigByInfo(_ret, vf);

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListAllConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListAllConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 3, true);
                        setResponseContext(msg->response->context);

                        callback_ListConfig(_ret, vf);

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_ListConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<std::string> vf;
                        _is.read(vf, 2, true);
                        setResponseContext(msg->response->context);

                        callback_ListConfigByInfo(_ret, vf);

                    }
                    catch(std::exception &ex)
                    {
                        callback_ListConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_ListConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 4, true);
                        setResponseContext(msg->response->context);

                        callback_checkConfig(_ret, result);

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_checkConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 2, true);
                        setResponseContext(msg->response->context);

                        callback_checkConfigByInfo(_ret, result);

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfig_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 4, true);
                        setResponseContext(msg->response->context);

                        callback_loadConfig(_ret, config);

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfig_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByHost_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 4, true);
                        setResponseContext(msg->response->context);

                        callback_loadConfigByHost(_ret, config);

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByHost_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByHost_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != kant::KANTSERVERSUCCESS)
                    {
                        callback_loadConfigByInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    kant::KantInputStream<kant::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        kant::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string config;
                        _is.read(config, 2, true);
                        setResponseContext(msg->response->context);

                        callback_loadConfigByInfo(_ret, config);

                    }
                    catch(std::exception &ex)
                    {
                        callback_loadConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loadConfigByInfo_exception(kant::KANTCLIENTDECODEERR);

                        return kant::KANTCLIENTDECODEERR;
                    }

                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef std::shared_ptr<ConfigCoroPrxCallback> ConfigCoroPrxCallbackPtr;

    /* proxy for client */
    class ConfigProxy : public kant::ServantProxy
    {
    public:
        typedef map<string, string> KANT_CONTEXT;
        ConfigProxy(Communicator* pCommunicator, const string& name, const string& setName)
                : ServantProxy(pCommunicator, name, setName) {}

        kant::Int32 ListAllConfigByInfo(const kant::GetConfigListInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(vf, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"ListAllConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 2, true);
            return _ret;
        }

        void async_ListAllConfigByInfo(ConfigPrxCallbackPtr callback,const kant::GetConfigListInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise_async_ListAllConfigByInfo(const kant::GetConfigListInfo &configInfo,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseListAllConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListAllConfigByInfo(ConfigCoroPrxCallbackPtr callback,const kant::GetConfigListInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListAllConfigByInfo", _os, context, _mStatus, callback, true);
        }

        kant::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(vf, 3);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"ListConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 3, true);
            return _ret;
        }

        void async_ListConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfig", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise_async_ListConfig(const std::string &app,const std::string &server,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfig", _os, context, _mStatus, callback, true);
        }

        kant::Int32 ListConfigByInfo(const kant::ConfigInfo & configInfo,vector<std::string> &vf,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(vf, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"ListConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(vf, 2, true);
            return _ret;
        }

        void async_ListConfigByInfo(ConfigPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise_async_ListConfigByInfo(const kant::ConfigInfo &configInfo,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseListConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_ListConfigByInfo(ConfigCoroPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"ListConfigByInfo", _os, context, _mStatus, callback, true);
        }

        kant::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            _os.write(result, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"checkConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 4, true);
            return _ret;
        }

        void async_checkConfig(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfig", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise_async_checkConfig(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkConfig(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfig", _os, context, _mStatus, callback, true);
        }

        kant::Int32 checkConfigByInfo(const kant::ConfigInfo & configInfo,std::string &result,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(result, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"checkConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 2, true);
            return _ret;
        }

        void async_checkConfigByInfo(ConfigPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise_async_checkConfigByInfo(const kant::ConfigInfo &configInfo,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromisecheckConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkConfigByInfo(ConfigCoroPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"checkConfigByInfo", _os, context, _mStatus, callback, true);
        }

        kant::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            _os.write(config, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"loadConfig", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 4, true);
            return _ret;
        }

        void async_loadConfig(ConfigPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfig", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise_async_loadConfig(const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfig", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfig(ConfigCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &filename,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(filename, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfig", _os, context, _mStatus, callback, true);
        }

        kant::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            _os.write(config, 4);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"loadConfigByHost", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 4, true);
            return _ret;
        }

        void async_loadConfigByHost(ConfigPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByHost", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise_async_loadConfigByHost(const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByHostPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByHost", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfigByHost(ConfigCoroPrxCallbackPtr callback,const std::string &appServerName,const std::string &filename,const std::string &host,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(appServerName, 1);
            _os.write(filename, 2);
            _os.write(host, 3);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByHost", _os, context, _mStatus, callback, true);
        }

        kant::Int32 loadConfigByInfo(const kant::ConfigInfo & configInfo,std::string &config,const map<string, string> &context = KANT_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            _os.write(config, 2);
            std::map<string, string> _mStatus;
            shared_ptr<kant::ResponsePacket> rep = kant_invoke(kant::KANTNORMAL,"loadConfigByInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            kant::KantInputStream<kant::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            kant::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(config, 2, true);
            return _ret;
        }

        void async_loadConfigByInfo(ConfigPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback);
        }
        
        kant::Future< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise_async_loadConfigByInfo(const kant::ConfigInfo &configInfo,const map<string, string>& context)
        {
            kant::Promise< ConfigPrxCallbackPromise::PromiseloadConfigByInfoPtr > promise;
            ConfigPrxCallbackPromisePtr callback = std::make_shared<ConfigPrxCallbackPromise>(promise);

            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loadConfigByInfo(ConfigCoroPrxCallbackPtr callback,const kant::ConfigInfo &configInfo,const map<string, string>& context = KANT_CONTEXT())
        {
            kant::KantOutputStream<kant::BufferWriterVector> _os;
            _os.write(configInfo, 1);
            std::map<string, string> _mStatus;
            kant_invoke_async(kant::KANTNORMAL,"loadConfigByInfo", _os, context, _mStatus, callback, true);
        }

        ConfigProxy* kant_hash(int64_t key)
        {
            return (ConfigProxy*)ServantProxy::kant_hash(key);
        }

        ConfigProxy* kant_consistent_hash(int64_t key)
        {
            return (ConfigProxy*)ServantProxy::kant_consistent_hash(key);
        }

        ConfigProxy* kant_open_trace(bool traceParam = false)
        {
            return (ConfigProxy*)ServantProxy::kant_open_trace(traceParam);
        }

        ConfigProxy* kant_set_timeout(int msecond)
        {
            return (ConfigProxy*)ServantProxy::kant_set_timeout(msecond);
        }

        static const char* kant_prxname() { return "ConfigProxy"; }
    };
    typedef std::shared_ptr<ConfigProxy> ConfigPrx;

    /* servant for server */
    class Config : public kant::Servant
    {
    public:
        virtual ~Config(){}
        virtual kant::Int32 ListAllConfigByInfo(const kant::GetConfigListInfo & configInfo,vector<std::string> &vf,kant::KantCurrentPtr current) = 0;
        static void async_response_ListAllConfigByInfo(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<std::string> &vf)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("vf", vf);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 ListConfig(const std::string & app,const std::string & server,vector<std::string> &vf,kant::KantCurrentPtr current) = 0;
        static void async_response_ListConfig(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<std::string> &vf)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("vf", vf);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 3);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 ListConfigByInfo(const kant::ConfigInfo & configInfo,vector<std::string> &vf,kant::KantCurrentPtr current) = 0;
        static void async_response_ListConfigByInfo(kant::KantCurrentPtr current, kant::Int32 _ret, const vector<std::string> &vf)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("vf", vf);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(vf, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 checkConfig(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &result,kant::KantCurrentPtr current) = 0;
        static void async_response_checkConfig(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("result", result);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["result"] = kant::JsonOutput::writeJson(result);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 4);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 checkConfigByInfo(const kant::ConfigInfo & configInfo,std::string &result,kant::KantCurrentPtr current) = 0;
        static void async_response_checkConfigByInfo(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("result", result);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["result"] = kant::JsonOutput::writeJson(result);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(result, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 loadConfig(const std::string & app,const std::string & server,const std::string & filename,std::string &config,kant::KantCurrentPtr current) = 0;
        static void async_response_loadConfig(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &config)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("config", config);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["config"] = kant::JsonOutput::writeJson(config);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 loadConfigByHost(const std::string & appServerName,const std::string & filename,const std::string & host,std::string &config,kant::KantCurrentPtr current) = 0;
        static void async_response_loadConfigByHost(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &config)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("config", config);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["config"] = kant::JsonOutput::writeJson(config);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 4);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual kant::Int32 loadConfigByInfo(const kant::ConfigInfo & configInfo,std::string &config,kant::KantCurrentPtr current) = 0;
        static void async_response_loadConfigByInfo(kant::KantCurrentPtr current, kant::Int32 _ret, const std::string &config)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                kantAttr.setVersion(current->getRequestVersion());
                kantAttr.put("", _ret);
                kantAttr.put("kant_ret", _ret);
                kantAttr.put("config", config);

                vector<char> sTupResponseBuffer;
                kantAttr.encode(sTupResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                _p->value["config"] = kant::JsonOutput::writeJson(config);
                _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                kant::KT_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(kant::KANTSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                kant::KantOutputStream<kant::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(config, 2);

                current->sendResponse(kant::KANTSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(kant::KantCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __kant__Config_all[]=
            {
                "ListAllConfigByInfo",
                "ListConfig",
                "ListConfigByInfo",
                "checkConfig",
                "checkConfigByInfo",
                "loadConfig",
                "loadConfigByHost",
                "loadConfigByInfo"
            };

            pair<string*, string*> r = equal_range(__kant__Config_all, __kant__Config_all+8, _current->getFuncName());
            if(r.first == r.second) return kant::KANTSERVERNOFUNCERR;
            switch(r.first - __kant__Config_all)
            {
                case 0:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::GetConfigListInfo configInfo;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("configInfo", configInfo);
                        kantAttr.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        kant::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(vf, 2, false);
                    }
                    kant::Int32 _ret = ListAllConfigByInfo(configInfo,vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("vf", vf);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 1:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string server;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("server", server);
                        kantAttr.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(server, _jsonPtr->value["server"], true);
                        kant::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(server, 2, true);
                        _is.read(vf, 3, false);
                    }
                    kant::Int32 _ret = ListConfig(app,server,vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("vf", vf);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 2:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ConfigInfo configInfo;
                    vector<std::string> vf;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("configInfo", configInfo);
                        kantAttr.getByDefault("vf", vf, vf);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        kant::JsonInput::readJson(vf, _jsonPtr->value["vf"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(vf, 2, false);
                    }
                    kant::Int32 _ret = ListConfigByInfo(configInfo,vf, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("vf", vf);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["vf"] = kant::JsonOutput::writeJson(vf);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(vf, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 3:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string appServerName;
                    std::string filename;
                    std::string host;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("appServerName", appServerName);
                        kantAttr.get("filename", filename);
                        kantAttr.get("host", host);
                        kantAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(appServerName, _jsonPtr->value["appServerName"], true);
                        kant::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        kant::JsonInput::readJson(host, _jsonPtr->value["host"], true);
                        kant::JsonInput::readJson(result, _jsonPtr->value["result"], false);
                    }
                    else
                    {
                        _is.read(appServerName, 1, true);
                        _is.read(filename, 2, true);
                        _is.read(host, 3, true);
                        _is.read(result, 4, false);
                    }
                    kant::Int32 _ret = checkConfig(appServerName,filename,host,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("result", result);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["result"] = kant::JsonOutput::writeJson(result);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 4:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ConfigInfo configInfo;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("configInfo", configInfo);
                        kantAttr.getByDefault("result", result, result);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        kant::JsonInput::readJson(result, _jsonPtr->value["result"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(result, 2, false);
                    }
                    kant::Int32 _ret = checkConfigByInfo(configInfo,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("result", result);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["result"] = kant::JsonOutput::writeJson(result);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 5:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string server;
                    std::string filename;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("app", app);
                        kantAttr.get("server", server);
                        kantAttr.get("filename", filename);
                        kantAttr.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        kant::JsonInput::readJson(server, _jsonPtr->value["server"], true);
                        kant::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        kant::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(server, 2, true);
                        _is.read(filename, 3, true);
                        _is.read(config, 4, false);
                    }
                    kant::Int32 _ret = loadConfig(app,server,filename,config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("config", config);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["config"] = kant::JsonOutput::writeJson(config);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 6:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string appServerName;
                    std::string filename;
                    std::string host;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("appServerName", appServerName);
                        kantAttr.get("filename", filename);
                        kantAttr.get("host", host);
                        kantAttr.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(appServerName, _jsonPtr->value["appServerName"], true);
                        kant::JsonInput::readJson(filename, _jsonPtr->value["filename"], true);
                        kant::JsonInput::readJson(host, _jsonPtr->value["host"], true);
                        kant::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(appServerName, 1, true);
                        _is.read(filename, 2, true);
                        _is.read(host, 3, true);
                        _is.read(config, 4, false);
                    }
                    kant::Int32 _ret = loadConfigByHost(appServerName,filename,host,config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("config", config);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["config"] = kant::JsonOutput::writeJson(config);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
                case 7:
                {
                    kant::KantInputStream<kant::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    kant::ConfigInfo configInfo;
                    std::string config;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                        kantAttr.setVersion(_current->getRequestVersion());
                        kantAttr.decode(_current->getRequestBuffer());
                        kantAttr.get("configInfo", configInfo);
                        kantAttr.getByDefault("config", config, config);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        kant::JsonValueObjPtr _jsonPtr = std::dynamic_pointer_cast<kant::JsonValueObj>(kant::KT_Json::getValue(_current->getRequestBuffer()));
                        kant::JsonInput::readJson(configInfo, _jsonPtr->value["configInfo"], true);
                        kant::JsonInput::readJson(config, _jsonPtr->value["config"], false);
                    }
                    else
                    {
                        _is.read(configInfo, 1, true);
                        _is.read(config, 2, false);
                    }
                    kant::Int32 _ret = loadConfigByInfo(configInfo,config, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<kant::BufferWriterVector, kant::BufferReader>  kantAttr;
                            kantAttr.setVersion(_current->getRequestVersion());
                            kantAttr.put("", _ret);
                            kantAttr.put("kant_ret", _ret);
                            kantAttr.put("config", config);
                            kantAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            kant::JsonValueObjPtr _p = std::make_shared< kant::JsonValueObj>();
                            _p->value["config"] = kant::JsonOutput::writeJson(config);
                            _p->value["kant_ret"] = kant::JsonOutput::writeJson(_ret);
                            kant::KT_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            kant::KantOutputStream<kant::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(config, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return kant::KANTSERVERSUCCESS;

                }
            }
            return kant::KANTSERVERNOFUNCERR;
        }
    };


}



#endif
