/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations under the License.
 */

module kant
{
    ////////////////////////////////////////////////////////////////
    // 定义协议的版本号

    const short KANTVERSION     = 0x01;
    const short TUPVERSION      = 0x03;
    const short XMLVERSION      = 0x04;
    const short JSONVERSION     = 0x05;

    ////////////////////////////////////////////////////////////////
    // 定义消息的类型

    // 普通调用
    const byte KANTNORMAL  = 0x00;

    // 单向调用
    const byte KANTONEWAY  = 0x01;
    
    ////////////////////////////////////////////////////////////////
    // KANT定义的返回码

    const int KANTSERVERSUCCESS       = 0;       //服务器端处理成功
    const int KANTSERVERDECODEERR     = -1;      //服务器端解码异常
    const int KANTSERVERENCODEERR     = -2;      //服务器端编码异常
    const int KANTSERVERNOFUNCERR     = -3;      //服务器端没有该函数
    const int KANTSERVERNOSERVANTERR  = -4;      //服务器端没有该Servant对象
    const int KANTSERVERRESETGRID     = -5;      //服务器端灰度状态不一致
    const int KANTSERVERQUEUETIMEOUT  = -6;      //服务器队列超过限制
    const int KANTASYNCCALLTIMEOUT    = -7;      //异步调用超时
    const int KANTINVOKETIMEOUT       = -7;      //调用超时
    const int KANTPROXYCONNECTERR     = -8;      //proxy链接异常
    const int KANTSERVEROVERLOAD      = -9;      //服务器端超负载,超过队列长度
    const int KANTADAPTERNULL         = -10;     //客户端选路为空，服务不存在或者所有服务down掉了
    const int KANTINVOKEBYINVALIDESET = -11;     //客户端按set规则调用非法
    const int KANTCLIENTDECODEERR     = -12;     //客户端解码异常
    const int KANTSENDREQUESTERR      = -13;     //发送出错
    const int KANTSERVERUNKNOWNERR    = -99;     //服务器端位置异常

    /////////////////////////////////////////////////////////////////
    // 定义按位的消息状态类型,可复合

    const int KANTMESSAGETYPENULL     = 0x00;    //无状态
    const int KANTMESSAGETYPEHASH     = 0x01;    //HASH消息
    const int KANTMESSAGETYPEGRID     = 0x02;    //灰度消息
    const int KANTMESSAGETYPEDYED     = 0x04;    //染色消息
    const int KANTMESSAGETYPESAMPLE   = 0x08;    //stat采样消息
    const int KANTMESSAGETYPEASYNC    = 0x10;    //异步调用程序
    //const int KANTMESSAGETYPELOADED = 0x20;    //按负载值调用程序
    //const int KANTMESSAGETYPESETED = 0x40;     //按set规则调用类型，此字段后面将不使用
    const int KANTMESSAGETYPESETNAME = 0x80;     //按setname规则调用类型
    const int KANTMESSAGETYPETRACE   = 0x100;    //track调用链消息
    /////////////////////////////////////////////////////////////////
};
